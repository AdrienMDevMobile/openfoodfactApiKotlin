/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.apis.ProofsApi
import org.openapitools.client.models.PaginatedProofFullList
import org.openapitools.client.models.PatchedPriceUpdateCurrency
import org.openapitools.client.models.PatchedProofUpdate
import org.openapitools.client.models.PriceCreateLocationOsmType
import org.openapitools.client.models.ProofFull
import org.openapitools.client.models.ProofUpdate
import org.openapitools.client.models.TypeEnum

class ProofsApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of ProofsApi
        //val apiInstance = ProofsApi()

        // to test proofsDestroy
        should("test proofsDestroy") {
            // uncomment below to test proofsDestroy
            //val id : kotlin.Int = 56 // kotlin.Int | A unique integer value identifying this Proof.
            //apiInstance.proofsDestroy(id)
        }

        // to test proofsList
        should("test proofsList") {
            // uncomment below to test proofsList
            //val createdGte : java.time.OffsetDateTime = 2013-10-20T19:20:30+01:00 // java.time.OffsetDateTime | 
            //val createdLte : java.time.OffsetDateTime = 2013-10-20T19:20:30+01:00 // java.time.OffsetDateTime | 
            //val currency : kotlin.String = currency_example // kotlin.String | * `ADP` - ADP * `AED` - AED * `AFA` - AFA * `AFN` - AFN * `ALK` - ALK * `ALL` - ALL * `AMD` - AMD * `ANG` - ANG * `AOA` - AOA * `AOK` - AOK * `AON` - AON * `AOR` - AOR * `ARA` - ARA * `ARL` - ARL * `ARM` - ARM * `ARP` - ARP * `ARS` - ARS * `ATS` - ATS * `AUD` - AUD * `AWG` - AWG * `AZM` - AZM * `AZN` - AZN * `BAD` - BAD * `BAM` - BAM * `BAN` - BAN * `BBD` - BBD * `BDT` - BDT * `BEC` - BEC * `BEF` - BEF * `BEL` - BEL * `BGL` - BGL * `BGM` - BGM * `BGN` - BGN * `BGO` - BGO * `BHD` - BHD * `BIF` - BIF * `BMD` - BMD * `BND` - BND * `BOB` - BOB * `BOL` - BOL * `BOP` - BOP * `BOV` - BOV * `BRB` - BRB * `BRC` - BRC * `BRE` - BRE * `BRL` - BRL * `BRN` - BRN * `BRR` - BRR * `BRZ` - BRZ * `BSD` - BSD * `BTN` - BTN * `BUK` - BUK * `BWP` - BWP * `BYB` - BYB * `BYN` - BYN * `BYR` - BYR * `BZD` - BZD * `CAD` - CAD * `CDF` - CDF * `CHE` - CHE * `CHF` - CHF * `CHW` - CHW * `CLE` - CLE * `CLF` - CLF * `CLP` - CLP * `CNH` - CNH * `CNX` - CNX * `CNY` - CNY * `COP` - COP * `COU` - COU * `CRC` - CRC * `CSD` - CSD * `CSK` - CSK * `CUC` - CUC * `CUP` - CUP * `CVE` - CVE * `CYP` - CYP * `CZK` - CZK * `DDM` - DDM * `DEM` - DEM * `DJF` - DJF * `DKK` - DKK * `DOP` - DOP * `DZD` - DZD * `ECS` - ECS * `ECV` - ECV * `EEK` - EEK * `EGP` - EGP * `ERN` - ERN * `ESA` - ESA * `ESB` - ESB * `ESP` - ESP * `ETB` - ETB * `EUR` - EUR * `FIM` - FIM * `FJD` - FJD * `FKP` - FKP * `FRF` - FRF * `GBP` - GBP * `GEK` - GEK * `GEL` - GEL * `GHC` - GHC * `GHS` - GHS * `GIP` - GIP * `GMD` - GMD * `GNF` - GNF * `GNS` - GNS * `GQE` - GQE * `GRD` - GRD * `GTQ` - GTQ * `GWE` - GWE * `GWP` - GWP * `GYD` - GYD * `HKD` - HKD * `HNL` - HNL * `HRD` - HRD * `HRK` - HRK * `HTG` - HTG * `HUF` - HUF * `IDR` - IDR * `IEP` - IEP * `ILP` - ILP * `ILR` - ILR * `ILS` - ILS * `INR` - INR * `IQD` - IQD * `IRR` - IRR * `ISJ` - ISJ * `ISK` - ISK * `ITL` - ITL * `JMD` - JMD * `JOD` - JOD * `JPY` - JPY * `KES` - KES * `KGS` - KGS * `KHR` - KHR * `KMF` - KMF * `KPW` - KPW * `KRH` - KRH * `KRO` - KRO * `KRW` - KRW * `KWD` - KWD * `KYD` - KYD * `KZT` - KZT * `LAK` - LAK * `LBP` - LBP * `LKR` - LKR * `LRD` - LRD * `LSL` - LSL * `LTL` - LTL * `LTT` - LTT * `LUC` - LUC * `LUF` - LUF * `LUL` - LUL * `LVL` - LVL * `LVR` - LVR * `LYD` - LYD * `MAD` - MAD * `MAF` - MAF * `MCF` - MCF * `MDC` - MDC * `MDL` - MDL * `MGA` - MGA * `MGF` - MGF * `MKD` - MKD * `MKN` - MKN * `MLF` - MLF * `MMK` - MMK * `MNT` - MNT * `MOP` - MOP * `MRO` - MRO * `MRU` - MRU * `MTL` - MTL * `MTP` - MTP * `MUR` - MUR * `MVP` - MVP * `MVR` - MVR * `MWK` - MWK * `MXN` - MXN * `MXP` - MXP * `MXV` - MXV * `MYR` - MYR * `MZE` - MZE * `MZM` - MZM * `MZN` - MZN * `NAD` - NAD * `NGN` - NGN * `NIC` - NIC * `NIO` - NIO * `NLG` - NLG * `NOK` - NOK * `NPR` - NPR * `NZD` - NZD * `OMR` - OMR * `PAB` - PAB * `PEI` - PEI * `PEN` - PEN * `PES` - PES * `PGK` - PGK * `PHP` - PHP * `PKR` - PKR * `PLN` - PLN * `PLZ` - PLZ * `PTE` - PTE * `PYG` - PYG * `QAR` - QAR * `RHD` - RHD * `ROL` - ROL * `RON` - RON * `RSD` - RSD * `RUB` - RUB * `RUR` - RUR * `RWF` - RWF * `SAR` - SAR * `SBD` - SBD * `SCR` - SCR * `SDD` - SDD * `SDG` - SDG * `SDP` - SDP * `SEK` - SEK * `SGD` - SGD * `SHP` - SHP * `SIT` - SIT * `SKK` - SKK * `SLE` - SLE * `SLL` - SLL * `SOS` - SOS * `SRD` - SRD * `SRG` - SRG * `SSP` - SSP * `STD` - STD * `STN` - STN * `SUR` - SUR * `SVC` - SVC * `SYP` - SYP * `SZL` - SZL * `THB` - THB * `TJR` - TJR * `TJS` - TJS * `TMM` - TMM * `TMT` - TMT * `TND` - TND * `TOP` - TOP * `TPE` - TPE * `TRL` - TRL * `TRY` - TRY * `TTD` - TTD * `TWD` - TWD * `TZS` - TZS * `UAH` - UAH * `UAK` - UAK * `UGS` - UGS * `UGX` - UGX * `USD` - USD * `USN` - USN * `USS` - USS * `UYI` - UYI * `UYP` - UYP * `UYU` - UYU * `UYW` - UYW * `UZS` - UZS * `VEB` - VEB * `VED` - VED * `VEF` - VEF * `VES` - VES * `VND` - VND * `VNN` - VNN * `VUV` - VUV * `WST` - WST * `XAF` - XAF * `XAG` - XAG * `XAU` - XAU * `XBA` - XBA * `XBB` - XBB * `XBC` - XBC * `XBD` - XBD * `XCD` - XCD * `XDR` - XDR * `XEU` - XEU * `XFO` - XFO * `XFU` - XFU * `XOF` - XOF * `XPD` - XPD * `XPF` - XPF * `XPT` - XPT * `XRE` - XRE * `XSU` - XSU * `XTS` - XTS * `XUA` - XUA * `XXX` - XXX * `YDD` - YDD * `YER` - YER * `YUD` - YUD * `YUM` - YUM * `YUN` - YUN * `YUR` - YUR * `ZAL` - ZAL * `ZAR` - ZAR * `ZMK` - ZMK * `ZMW` - ZMW * `ZRN` - ZRN * `ZRZ` - ZRZ * `ZWD` - ZWD * `ZWL` - ZWL * `ZWR` - ZWR
            //val date : java.time.LocalDate = 2013-10-20 // java.time.LocalDate | 
            //val dateGt : java.time.LocalDate = 2013-10-20 // java.time.LocalDate | 
            //val dateGte : java.time.LocalDate = 2013-10-20 // java.time.LocalDate | 
            //val dateLt : java.time.LocalDate = 2013-10-20 // java.time.LocalDate | 
            //val dateLte : java.time.LocalDate = 2013-10-20 // java.time.LocalDate | 
            //val dateMonth : java.math.BigDecimal = 8.14 // java.math.BigDecimal | 
            //val dateYear : java.math.BigDecimal = 8.14 // java.math.BigDecimal | 
            //val locationId : kotlin.Int = 56 // kotlin.Int | 
            //val locationIdIsnull : kotlin.Boolean = true // kotlin.Boolean | 
            //val locationOsmId : kotlin.Int = 56 // kotlin.Int | 
            //val locationOsmType : kotlin.String = locationOsmType_example // kotlin.String | * `NODE` - NODE * `WAY` - WAY * `RELATION` - RELATION
            //val orderBy : kotlin.String = orderBy_example // kotlin.String | Which field to use when ordering the results.
            //val owner : kotlin.String = owner_example // kotlin.String | 
            //val page : kotlin.Int = 56 // kotlin.Int | A page number within the paginated result set.
            //val priceCount : kotlin.Int = 56 // kotlin.Int | 
            //val priceCountGte : kotlin.Int = 56 // kotlin.Int | 
            //val priceCountLte : kotlin.Int = 56 // kotlin.Int | 
            //val size : kotlin.Int = 56 // kotlin.Int | Number of results to return per page.
            //val type : kotlin.String = type_example // kotlin.String | * `PRICE_TAG` - PRICE_TAG * `RECEIPT` - RECEIPT * `GDPR_REQUEST` - GDPR_REQUEST * `SHOP_IMPORT` - SHOP_IMPORT
            //val result : PaginatedProofFullList = apiInstance.proofsList(createdGte, createdLte, currency, date, dateGt, dateGte, dateLt, dateLte, dateMonth, dateYear, locationId, locationIdIsnull, locationOsmId, locationOsmType, orderBy, owner, page, priceCount, priceCountGte, priceCountLte, size, type)
            //result shouldBe ("TODO")
        }

        // to test proofsPartialUpdate
        should("test proofsPartialUpdate") {
            // uncomment below to test proofsPartialUpdate
            //val id : kotlin.Int = 56 // kotlin.Int | A unique integer value identifying this Proof.
            //val patchedProofUpdate : PatchedProofUpdate =  // PatchedProofUpdate | 
            //val result : ProofUpdate = apiInstance.proofsPartialUpdate(id, patchedProofUpdate)
            //result shouldBe ("TODO")
        }

        // to test proofsRetrieve
        should("test proofsRetrieve") {
            // uncomment below to test proofsRetrieve
            //val id : kotlin.Int = 56 // kotlin.Int | A unique integer value identifying this Proof.
            //val result : ProofFull = apiInstance.proofsRetrieve(id)
            //result shouldBe ("TODO")
        }

        // to test proofsUploadCreate
        should("test proofsUploadCreate") {
            // uncomment below to test proofsUploadCreate
            //val file : kotlin.String = file_example // kotlin.String | 
            //val type : TypeEnum =  // TypeEnum | 
            //val currency : PatchedPriceUpdateCurrency =  // PatchedPriceUpdateCurrency | 
            //val date : java.time.LocalDate = 2013-10-20 // java.time.LocalDate | 
            //val locationOsmId : kotlin.Long = 789 // kotlin.Long | 
            //val locationOsmType : PriceCreateLocationOsmType =  // PriceCreateLocationOsmType | 
            //val result : ProofFull = apiInstance.proofsUploadCreate(file, type, currency, date, locationOsmId, locationOsmType)
            //result shouldBe ("TODO")
        }

    }
}
