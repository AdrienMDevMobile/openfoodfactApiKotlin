/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import org.openapitools.client.models.Location
import org.openapitools.client.models.LocationCreate
import org.openapitools.client.models.PaginatedLocationList

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class LocationsApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
     * 
     * 
     * @param locationCreate 
     * @return LocationCreate
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun locationsCreate(locationCreate: LocationCreate) : LocationCreate {
        val localVarResponse = locationsCreateWithHttpInfo(locationCreate = locationCreate)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as LocationCreate
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param locationCreate 
     * @return ApiResponse<LocationCreate?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun locationsCreateWithHttpInfo(locationCreate: LocationCreate) : ApiResponse<LocationCreate?> {
        val localVariableConfig = locationsCreateRequestConfig(locationCreate = locationCreate)

        return request<LocationCreate, LocationCreate>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation locationsCreate
     *
     * @param locationCreate 
     * @return RequestConfig
     */
    fun locationsCreateRequestConfig(locationCreate: LocationCreate) : RequestConfig<LocationCreate> {
        val localVariableBody = locationCreate
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/locations",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param orderBy Which field to use when ordering the results. (optional)
     * @param osmAddressCityLike  (optional)
     * @param osmAddressCountryLike  (optional)
     * @param osmNameLike  (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param priceCount  (optional)
     * @param priceCountGte  (optional)
     * @param priceCountLte  (optional)
     * @param size Number of results to return per page. (optional)
     * @return PaginatedLocationList
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun locationsList(orderBy: kotlin.String? = null, osmAddressCityLike: kotlin.String? = null, osmAddressCountryLike: kotlin.String? = null, osmNameLike: kotlin.String? = null, page: kotlin.Int? = null, priceCount: kotlin.Int? = null, priceCountGte: kotlin.Int? = null, priceCountLte: kotlin.Int? = null, size: kotlin.Int? = null) : PaginatedLocationList {
        val localVarResponse = locationsListWithHttpInfo(orderBy = orderBy, osmAddressCityLike = osmAddressCityLike, osmAddressCountryLike = osmAddressCountryLike, osmNameLike = osmNameLike, page = page, priceCount = priceCount, priceCountGte = priceCountGte, priceCountLte = priceCountLte, size = size)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PaginatedLocationList
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param orderBy Which field to use when ordering the results. (optional)
     * @param osmAddressCityLike  (optional)
     * @param osmAddressCountryLike  (optional)
     * @param osmNameLike  (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param priceCount  (optional)
     * @param priceCountGte  (optional)
     * @param priceCountLte  (optional)
     * @param size Number of results to return per page. (optional)
     * @return ApiResponse<PaginatedLocationList?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun locationsListWithHttpInfo(orderBy: kotlin.String?, osmAddressCityLike: kotlin.String?, osmAddressCountryLike: kotlin.String?, osmNameLike: kotlin.String?, page: kotlin.Int?, priceCount: kotlin.Int?, priceCountGte: kotlin.Int?, priceCountLte: kotlin.Int?, size: kotlin.Int?) : ApiResponse<PaginatedLocationList?> {
        val localVariableConfig = locationsListRequestConfig(orderBy = orderBy, osmAddressCityLike = osmAddressCityLike, osmAddressCountryLike = osmAddressCountryLike, osmNameLike = osmNameLike, page = page, priceCount = priceCount, priceCountGte = priceCountGte, priceCountLte = priceCountLte, size = size)

        return request<Unit, PaginatedLocationList>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation locationsList
     *
     * @param orderBy Which field to use when ordering the results. (optional)
     * @param osmAddressCityLike  (optional)
     * @param osmAddressCountryLike  (optional)
     * @param osmNameLike  (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param priceCount  (optional)
     * @param priceCountGte  (optional)
     * @param priceCountLte  (optional)
     * @param size Number of results to return per page. (optional)
     * @return RequestConfig
     */
    fun locationsListRequestConfig(orderBy: kotlin.String?, osmAddressCityLike: kotlin.String?, osmAddressCountryLike: kotlin.String?, osmNameLike: kotlin.String?, page: kotlin.Int?, priceCount: kotlin.Int?, priceCountGte: kotlin.Int?, priceCountLte: kotlin.Int?, size: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (orderBy != null) {
                    put("order_by", listOf(orderBy.toString()))
                }
                if (osmAddressCityLike != null) {
                    put("osm_address_city__like", listOf(osmAddressCityLike.toString()))
                }
                if (osmAddressCountryLike != null) {
                    put("osm_address_country__like", listOf(osmAddressCountryLike.toString()))
                }
                if (osmNameLike != null) {
                    put("osm_name__like", listOf(osmNameLike.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (priceCount != null) {
                    put("price_count", listOf(priceCount.toString()))
                }
                if (priceCountGte != null) {
                    put("price_count__gte", listOf(priceCountGte.toString()))
                }
                if (priceCountLte != null) {
                    put("price_count__lte", listOf(priceCountLte.toString()))
                }
                if (size != null) {
                    put("size", listOf(size.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/locations",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param osmId 
     * @param osmType 
     * @return Location
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun locationsOsmRetrieve(osmId: kotlin.String, osmType: kotlin.String) : Location {
        val localVarResponse = locationsOsmRetrieveWithHttpInfo(osmId = osmId, osmType = osmType)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Location
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param osmId 
     * @param osmType 
     * @return ApiResponse<Location?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun locationsOsmRetrieveWithHttpInfo(osmId: kotlin.String, osmType: kotlin.String) : ApiResponse<Location?> {
        val localVariableConfig = locationsOsmRetrieveRequestConfig(osmId = osmId, osmType = osmType)

        return request<Unit, Location>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation locationsOsmRetrieve
     *
     * @param osmId 
     * @param osmType 
     * @return RequestConfig
     */
    fun locationsOsmRetrieveRequestConfig(osmId: kotlin.String, osmType: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/locations/osm/{osm_type}/{osm_id}".replace("{"+"osm_id"+"}", encodeURIComponent(osmId.toString())).replace("{"+"osm_type"+"}", encodeURIComponent(osmType.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this Location.
     * @return Location
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun locationsRetrieve(id: kotlin.Int) : Location {
        val localVarResponse = locationsRetrieveWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Location
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this Location.
     * @return ApiResponse<Location?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun locationsRetrieveWithHttpInfo(id: kotlin.Int) : ApiResponse<Location?> {
        val localVariableConfig = locationsRetrieveRequestConfig(id = id)

        return request<Unit, Location>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation locationsRetrieve
     *
     * @param id A unique integer value identifying this Location.
     * @return RequestConfig
     */
    fun locationsRetrieveRequestConfig(id: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/locations/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
