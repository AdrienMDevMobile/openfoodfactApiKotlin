/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import org.openapitools.client.models.PaginatedPriceFullList
import org.openapitools.client.models.PatchedPriceUpdate
import org.openapitools.client.models.PriceCreate
import org.openapitools.client.models.PriceFull
import org.openapitools.client.models.PriceStats
import org.openapitools.client.models.PriceUpdate

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class PricesApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
     * 
     * 
     * @param priceCreate 
     * @return PriceCreate
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun pricesCreate(priceCreate: PriceCreate) : PriceCreate {
        val localVarResponse = pricesCreateWithHttpInfo(priceCreate = priceCreate)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PriceCreate
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param priceCreate 
     * @return ApiResponse<PriceCreate?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun pricesCreateWithHttpInfo(priceCreate: PriceCreate) : ApiResponse<PriceCreate?> {
        val localVariableConfig = pricesCreateRequestConfig(priceCreate = priceCreate)

        return request<PriceCreate, PriceCreate>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation pricesCreate
     *
     * @param priceCreate 
     * @return RequestConfig
     */
    fun pricesCreateRequestConfig(priceCreate: PriceCreate) : RequestConfig<PriceCreate> {
        val localVariableBody = priceCreate
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/prices",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this Price.
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun pricesDestroy(id: kotlin.Int) : Unit {
        val localVarResponse = pricesDestroyWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this Price.
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun pricesDestroyWithHttpInfo(id: kotlin.Int) : ApiResponse<Unit?> {
        val localVariableConfig = pricesDestroyRequestConfig(id = id)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation pricesDestroy
     *
     * @param id A unique integer value identifying this Price.
     * @return RequestConfig
     */
    fun pricesDestroyRequestConfig(id: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/v1/prices/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter currency
     */
     enum class CurrencyPricesList(val value: kotlin.String) {
         @Json(name = "ADP") ADP("ADP"),
         @Json(name = "AED") AED("AED"),
         @Json(name = "AFA") AFA("AFA"),
         @Json(name = "AFN") AFN("AFN"),
         @Json(name = "ALK") ALK("ALK"),
         @Json(name = "ALL") ALL("ALL"),
         @Json(name = "AMD") AMD("AMD"),
         @Json(name = "ANG") ANG("ANG"),
         @Json(name = "AOA") AOA("AOA"),
         @Json(name = "AOK") AOK("AOK"),
         @Json(name = "AON") AON("AON"),
         @Json(name = "AOR") AOR("AOR"),
         @Json(name = "ARA") ARA("ARA"),
         @Json(name = "ARL") ARL("ARL"),
         @Json(name = "ARM") ARM("ARM"),
         @Json(name = "ARP") ARP("ARP"),
         @Json(name = "ARS") ARS("ARS"),
         @Json(name = "ATS") ATS("ATS"),
         @Json(name = "AUD") AUD("AUD"),
         @Json(name = "AWG") AWG("AWG"),
         @Json(name = "AZM") AZM("AZM"),
         @Json(name = "AZN") AZN("AZN"),
         @Json(name = "BAD") BAD("BAD"),
         @Json(name = "BAM") BAM("BAM"),
         @Json(name = "BAN") BAN("BAN"),
         @Json(name = "BBD") BBD("BBD"),
         @Json(name = "BDT") BDT("BDT"),
         @Json(name = "BEC") BEC("BEC"),
         @Json(name = "BEF") BEF("BEF"),
         @Json(name = "BEL") BEL("BEL"),
         @Json(name = "BGL") BGL("BGL"),
         @Json(name = "BGM") BGM("BGM"),
         @Json(name = "BGN") BGN("BGN"),
         @Json(name = "BGO") BGO("BGO"),
         @Json(name = "BHD") BHD("BHD"),
         @Json(name = "BIF") BIF("BIF"),
         @Json(name = "BMD") BMD("BMD"),
         @Json(name = "BND") BND("BND"),
         @Json(name = "BOB") BOB("BOB"),
         @Json(name = "BOL") BOL("BOL"),
         @Json(name = "BOP") BOP("BOP"),
         @Json(name = "BOV") BOV("BOV"),
         @Json(name = "BRB") BRB("BRB"),
         @Json(name = "BRC") BRC("BRC"),
         @Json(name = "BRE") BRE("BRE"),
         @Json(name = "BRL") BRL("BRL"),
         @Json(name = "BRN") BRN("BRN"),
         @Json(name = "BRR") BRR("BRR"),
         @Json(name = "BRZ") BRZ("BRZ"),
         @Json(name = "BSD") BSD("BSD"),
         @Json(name = "BTN") BTN("BTN"),
         @Json(name = "BUK") BUK("BUK"),
         @Json(name = "BWP") BWP("BWP"),
         @Json(name = "BYB") BYB("BYB"),
         @Json(name = "BYN") BYN("BYN"),
         @Json(name = "BYR") BYR("BYR"),
         @Json(name = "BZD") BZD("BZD"),
         @Json(name = "CAD") CAD("CAD"),
         @Json(name = "CDF") CDF("CDF"),
         @Json(name = "CHE") CHE("CHE"),
         @Json(name = "CHF") CHF("CHF"),
         @Json(name = "CHW") CHW("CHW"),
         @Json(name = "CLE") CLE("CLE"),
         @Json(name = "CLF") CLF("CLF"),
         @Json(name = "CLP") CLP("CLP"),
         @Json(name = "CNH") CNH("CNH"),
         @Json(name = "CNX") CNX("CNX"),
         @Json(name = "CNY") CNY("CNY"),
         @Json(name = "COP") COP("COP"),
         @Json(name = "COU") COU("COU"),
         @Json(name = "CRC") CRC("CRC"),
         @Json(name = "CSD") CSD("CSD"),
         @Json(name = "CSK") CSK("CSK"),
         @Json(name = "CUC") CUC("CUC"),
         @Json(name = "CUP") CUP("CUP"),
         @Json(name = "CVE") CVE("CVE"),
         @Json(name = "CYP") CYP("CYP"),
         @Json(name = "CZK") CZK("CZK"),
         @Json(name = "DDM") DDM("DDM"),
         @Json(name = "DEM") DEM("DEM"),
         @Json(name = "DJF") DJF("DJF"),
         @Json(name = "DKK") DKK("DKK"),
         @Json(name = "DOP") DOP("DOP"),
         @Json(name = "DZD") DZD("DZD"),
         @Json(name = "ECS") ECS("ECS"),
         @Json(name = "ECV") ECV("ECV"),
         @Json(name = "EEK") EEK("EEK"),
         @Json(name = "EGP") EGP("EGP"),
         @Json(name = "ERN") ERN("ERN"),
         @Json(name = "ESA") ESA("ESA"),
         @Json(name = "ESB") ESB("ESB"),
         @Json(name = "ESP") ESP("ESP"),
         @Json(name = "ETB") ETB("ETB"),
         @Json(name = "EUR") EUR("EUR"),
         @Json(name = "FIM") FIM("FIM"),
         @Json(name = "FJD") FJD("FJD"),
         @Json(name = "FKP") FKP("FKP"),
         @Json(name = "FRF") FRF("FRF"),
         @Json(name = "GBP") GBP("GBP"),
         @Json(name = "GEK") GEK("GEK"),
         @Json(name = "GEL") GEL("GEL"),
         @Json(name = "GHC") GHC("GHC"),
         @Json(name = "GHS") GHS("GHS"),
         @Json(name = "GIP") GIP("GIP"),
         @Json(name = "GMD") GMD("GMD"),
         @Json(name = "GNF") GNF("GNF"),
         @Json(name = "GNS") GNS("GNS"),
         @Json(name = "GQE") GQE("GQE"),
         @Json(name = "GRD") GRD("GRD"),
         @Json(name = "GTQ") GTQ("GTQ"),
         @Json(name = "GWE") GWE("GWE"),
         @Json(name = "GWP") GWP("GWP"),
         @Json(name = "GYD") GYD("GYD"),
         @Json(name = "HKD") HKD("HKD"),
         @Json(name = "HNL") HNL("HNL"),
         @Json(name = "HRD") HRD("HRD"),
         @Json(name = "HRK") HRK("HRK"),
         @Json(name = "HTG") HTG("HTG"),
         @Json(name = "HUF") HUF("HUF"),
         @Json(name = "IDR") IDR("IDR"),
         @Json(name = "IEP") IEP("IEP"),
         @Json(name = "ILP") ILP("ILP"),
         @Json(name = "ILR") ILR("ILR"),
         @Json(name = "ILS") ILS("ILS"),
         @Json(name = "INR") INR("INR"),
         @Json(name = "IQD") IQD("IQD"),
         @Json(name = "IRR") IRR("IRR"),
         @Json(name = "ISJ") ISJ("ISJ"),
         @Json(name = "ISK") ISK("ISK"),
         @Json(name = "ITL") ITL("ITL"),
         @Json(name = "JMD") JMD("JMD"),
         @Json(name = "JOD") JOD("JOD"),
         @Json(name = "JPY") JPY("JPY"),
         @Json(name = "KES") KES("KES"),
         @Json(name = "KGS") KGS("KGS"),
         @Json(name = "KHR") KHR("KHR"),
         @Json(name = "KMF") KMF("KMF"),
         @Json(name = "KPW") KPW("KPW"),
         @Json(name = "KRH") KRH("KRH"),
         @Json(name = "KRO") KRO("KRO"),
         @Json(name = "KRW") KRW("KRW"),
         @Json(name = "KWD") KWD("KWD"),
         @Json(name = "KYD") KYD("KYD"),
         @Json(name = "KZT") KZT("KZT"),
         @Json(name = "LAK") LAK("LAK"),
         @Json(name = "LBP") LBP("LBP"),
         @Json(name = "LKR") LKR("LKR"),
         @Json(name = "LRD") LRD("LRD"),
         @Json(name = "LSL") LSL("LSL"),
         @Json(name = "LTL") LTL("LTL"),
         @Json(name = "LTT") LTT("LTT"),
         @Json(name = "LUC") LUC("LUC"),
         @Json(name = "LUF") LUF("LUF"),
         @Json(name = "LUL") LUL("LUL"),
         @Json(name = "LVL") LVL("LVL"),
         @Json(name = "LVR") LVR("LVR"),
         @Json(name = "LYD") LYD("LYD"),
         @Json(name = "MAD") MAD("MAD"),
         @Json(name = "MAF") MAF("MAF"),
         @Json(name = "MCF") MCF("MCF"),
         @Json(name = "MDC") MDC("MDC"),
         @Json(name = "MDL") MDL("MDL"),
         @Json(name = "MGA") MGA("MGA"),
         @Json(name = "MGF") MGF("MGF"),
         @Json(name = "MKD") MKD("MKD"),
         @Json(name = "MKN") MKN("MKN"),
         @Json(name = "MLF") MLF("MLF"),
         @Json(name = "MMK") MMK("MMK"),
         @Json(name = "MNT") MNT("MNT"),
         @Json(name = "MOP") MOP("MOP"),
         @Json(name = "MRO") MRO("MRO"),
         @Json(name = "MRU") MRU("MRU"),
         @Json(name = "MTL") MTL("MTL"),
         @Json(name = "MTP") MTP("MTP"),
         @Json(name = "MUR") MUR("MUR"),
         @Json(name = "MVP") MVP("MVP"),
         @Json(name = "MVR") MVR("MVR"),
         @Json(name = "MWK") MWK("MWK"),
         @Json(name = "MXN") MXN("MXN"),
         @Json(name = "MXP") MXP("MXP"),
         @Json(name = "MXV") MXV("MXV"),
         @Json(name = "MYR") MYR("MYR"),
         @Json(name = "MZE") MZE("MZE"),
         @Json(name = "MZM") MZM("MZM"),
         @Json(name = "MZN") MZN("MZN"),
         @Json(name = "NAD") NAD("NAD"),
         @Json(name = "NGN") NGN("NGN"),
         @Json(name = "NIC") NIC("NIC"),
         @Json(name = "NIO") NIO("NIO"),
         @Json(name = "NLG") NLG("NLG"),
         @Json(name = "NOK") NOK("NOK"),
         @Json(name = "NPR") NPR("NPR"),
         @Json(name = "NZD") NZD("NZD"),
         @Json(name = "OMR") OMR("OMR"),
         @Json(name = "PAB") PAB("PAB"),
         @Json(name = "PEI") PEI("PEI"),
         @Json(name = "PEN") PEN("PEN"),
         @Json(name = "PES") PES("PES"),
         @Json(name = "PGK") PGK("PGK"),
         @Json(name = "PHP") PHP("PHP"),
         @Json(name = "PKR") PKR("PKR"),
         @Json(name = "PLN") PLN("PLN"),
         @Json(name = "PLZ") PLZ("PLZ"),
         @Json(name = "PTE") PTE("PTE"),
         @Json(name = "PYG") PYG("PYG"),
         @Json(name = "QAR") QAR("QAR"),
         @Json(name = "RHD") RHD("RHD"),
         @Json(name = "ROL") ROL("ROL"),
         @Json(name = "RON") RON("RON"),
         @Json(name = "RSD") RSD("RSD"),
         @Json(name = "RUB") RUB("RUB"),
         @Json(name = "RUR") RUR("RUR"),
         @Json(name = "RWF") RWF("RWF"),
         @Json(name = "SAR") SAR("SAR"),
         @Json(name = "SBD") SBD("SBD"),
         @Json(name = "SCR") SCR("SCR"),
         @Json(name = "SDD") SDD("SDD"),
         @Json(name = "SDG") SDG("SDG"),
         @Json(name = "SDP") SDP("SDP"),
         @Json(name = "SEK") SEK("SEK"),
         @Json(name = "SGD") SGD("SGD"),
         @Json(name = "SHP") SHP("SHP"),
         @Json(name = "SIT") SIT("SIT"),
         @Json(name = "SKK") SKK("SKK"),
         @Json(name = "SLE") SLE("SLE"),
         @Json(name = "SLL") SLL("SLL"),
         @Json(name = "SOS") SOS("SOS"),
         @Json(name = "SRD") SRD("SRD"),
         @Json(name = "SRG") SRG("SRG"),
         @Json(name = "SSP") SSP("SSP"),
         @Json(name = "STD") STD("STD"),
         @Json(name = "STN") STN("STN"),
         @Json(name = "SUR") SUR("SUR"),
         @Json(name = "SVC") SVC("SVC"),
         @Json(name = "SYP") SYP("SYP"),
         @Json(name = "SZL") SZL("SZL"),
         @Json(name = "THB") THB("THB"),
         @Json(name = "TJR") TJR("TJR"),
         @Json(name = "TJS") TJS("TJS"),
         @Json(name = "TMM") TMM("TMM"),
         @Json(name = "TMT") TMT("TMT"),
         @Json(name = "TND") TND("TND"),
         @Json(name = "TOP") TOP("TOP"),
         @Json(name = "TPE") TPE("TPE"),
         @Json(name = "TRL") TRL("TRL"),
         @Json(name = "TRY") TRY("TRY"),
         @Json(name = "TTD") TTD("TTD"),
         @Json(name = "TWD") TWD("TWD"),
         @Json(name = "TZS") TZS("TZS"),
         @Json(name = "UAH") UAH("UAH"),
         @Json(name = "UAK") UAK("UAK"),
         @Json(name = "UGS") UGS("UGS"),
         @Json(name = "UGX") UGX("UGX"),
         @Json(name = "USD") USD("USD"),
         @Json(name = "USN") USN("USN"),
         @Json(name = "USS") USS("USS"),
         @Json(name = "UYI") UYI("UYI"),
         @Json(name = "UYP") UYP("UYP"),
         @Json(name = "UYU") UYU("UYU"),
         @Json(name = "UYW") UYW("UYW"),
         @Json(name = "UZS") UZS("UZS"),
         @Json(name = "VEB") VEB("VEB"),
         @Json(name = "VED") VED("VED"),
         @Json(name = "VEF") VEF("VEF"),
         @Json(name = "VES") VES("VES"),
         @Json(name = "VND") VND("VND"),
         @Json(name = "VNN") VNN("VNN"),
         @Json(name = "VUV") VUV("VUV"),
         @Json(name = "WST") WST("WST"),
         @Json(name = "XAF") XAF("XAF"),
         @Json(name = "XAG") XAG("XAG"),
         @Json(name = "XAU") XAU("XAU"),
         @Json(name = "XBA") XBA("XBA"),
         @Json(name = "XBB") XBB("XBB"),
         @Json(name = "XBC") XBC("XBC"),
         @Json(name = "XBD") XBD("XBD"),
         @Json(name = "XCD") XCD("XCD"),
         @Json(name = "XDR") XDR("XDR"),
         @Json(name = "XEU") XEU("XEU"),
         @Json(name = "XFO") XFO("XFO"),
         @Json(name = "XFU") XFU("XFU"),
         @Json(name = "XOF") XOF("XOF"),
         @Json(name = "XPD") XPD("XPD"),
         @Json(name = "XPF") XPF("XPF"),
         @Json(name = "XPT") XPT("XPT"),
         @Json(name = "XRE") XRE("XRE"),
         @Json(name = "XSU") XSU("XSU"),
         @Json(name = "XTS") XTS("XTS"),
         @Json(name = "XUA") XUA("XUA"),
         @Json(name = "XXX") XXX("XXX"),
         @Json(name = "YDD") YDD("YDD"),
         @Json(name = "YER") YER("YER"),
         @Json(name = "YUD") YUD("YUD"),
         @Json(name = "YUM") YUM("YUM"),
         @Json(name = "YUN") YUN("YUN"),
         @Json(name = "YUR") YUR("YUR"),
         @Json(name = "ZAL") ZAL("ZAL"),
         @Json(name = "ZAR") ZAR("ZAR"),
         @Json(name = "ZMK") ZMK("ZMK"),
         @Json(name = "ZMW") ZMW("ZMW"),
         @Json(name = "ZRN") ZRN("ZRN"),
         @Json(name = "ZRZ") ZRZ("ZRZ"),
         @Json(name = "ZWD") ZWD("ZWD"),
         @Json(name = "ZWL") ZWL("ZWL"),
         @Json(name = "ZWR") ZWR("ZWR")
     }

    /**
     * enum for parameter locationOsmType
     */
     enum class LocationOsmTypePricesList(val value: kotlin.String) {
         @Json(name = "NODE") NODE("NODE"),
         @Json(name = "RELATION") RELATION("RELATION"),
         @Json(name = "WAY") WAY("WAY")
     }

    /**
     * 
     * 
     * @param categoryTag  (optional)
     * @param createdGte  (optional)
     * @param createdLte  (optional)
     * @param currency * &#x60;ADP&#x60; - ADP * &#x60;AED&#x60; - AED * &#x60;AFA&#x60; - AFA * &#x60;AFN&#x60; - AFN * &#x60;ALK&#x60; - ALK * &#x60;ALL&#x60; - ALL * &#x60;AMD&#x60; - AMD * &#x60;ANG&#x60; - ANG * &#x60;AOA&#x60; - AOA * &#x60;AOK&#x60; - AOK * &#x60;AON&#x60; - AON * &#x60;AOR&#x60; - AOR * &#x60;ARA&#x60; - ARA * &#x60;ARL&#x60; - ARL * &#x60;ARM&#x60; - ARM * &#x60;ARP&#x60; - ARP * &#x60;ARS&#x60; - ARS * &#x60;ATS&#x60; - ATS * &#x60;AUD&#x60; - AUD * &#x60;AWG&#x60; - AWG * &#x60;AZM&#x60; - AZM * &#x60;AZN&#x60; - AZN * &#x60;BAD&#x60; - BAD * &#x60;BAM&#x60; - BAM * &#x60;BAN&#x60; - BAN * &#x60;BBD&#x60; - BBD * &#x60;BDT&#x60; - BDT * &#x60;BEC&#x60; - BEC * &#x60;BEF&#x60; - BEF * &#x60;BEL&#x60; - BEL * &#x60;BGL&#x60; - BGL * &#x60;BGM&#x60; - BGM * &#x60;BGN&#x60; - BGN * &#x60;BGO&#x60; - BGO * &#x60;BHD&#x60; - BHD * &#x60;BIF&#x60; - BIF * &#x60;BMD&#x60; - BMD * &#x60;BND&#x60; - BND * &#x60;BOB&#x60; - BOB * &#x60;BOL&#x60; - BOL * &#x60;BOP&#x60; - BOP * &#x60;BOV&#x60; - BOV * &#x60;BRB&#x60; - BRB * &#x60;BRC&#x60; - BRC * &#x60;BRE&#x60; - BRE * &#x60;BRL&#x60; - BRL * &#x60;BRN&#x60; - BRN * &#x60;BRR&#x60; - BRR * &#x60;BRZ&#x60; - BRZ * &#x60;BSD&#x60; - BSD * &#x60;BTN&#x60; - BTN * &#x60;BUK&#x60; - BUK * &#x60;BWP&#x60; - BWP * &#x60;BYB&#x60; - BYB * &#x60;BYN&#x60; - BYN * &#x60;BYR&#x60; - BYR * &#x60;BZD&#x60; - BZD * &#x60;CAD&#x60; - CAD * &#x60;CDF&#x60; - CDF * &#x60;CHE&#x60; - CHE * &#x60;CHF&#x60; - CHF * &#x60;CHW&#x60; - CHW * &#x60;CLE&#x60; - CLE * &#x60;CLF&#x60; - CLF * &#x60;CLP&#x60; - CLP * &#x60;CNH&#x60; - CNH * &#x60;CNX&#x60; - CNX * &#x60;CNY&#x60; - CNY * &#x60;COP&#x60; - COP * &#x60;COU&#x60; - COU * &#x60;CRC&#x60; - CRC * &#x60;CSD&#x60; - CSD * &#x60;CSK&#x60; - CSK * &#x60;CUC&#x60; - CUC * &#x60;CUP&#x60; - CUP * &#x60;CVE&#x60; - CVE * &#x60;CYP&#x60; - CYP * &#x60;CZK&#x60; - CZK * &#x60;DDM&#x60; - DDM * &#x60;DEM&#x60; - DEM * &#x60;DJF&#x60; - DJF * &#x60;DKK&#x60; - DKK * &#x60;DOP&#x60; - DOP * &#x60;DZD&#x60; - DZD * &#x60;ECS&#x60; - ECS * &#x60;ECV&#x60; - ECV * &#x60;EEK&#x60; - EEK * &#x60;EGP&#x60; - EGP * &#x60;ERN&#x60; - ERN * &#x60;ESA&#x60; - ESA * &#x60;ESB&#x60; - ESB * &#x60;ESP&#x60; - ESP * &#x60;ETB&#x60; - ETB * &#x60;EUR&#x60; - EUR * &#x60;FIM&#x60; - FIM * &#x60;FJD&#x60; - FJD * &#x60;FKP&#x60; - FKP * &#x60;FRF&#x60; - FRF * &#x60;GBP&#x60; - GBP * &#x60;GEK&#x60; - GEK * &#x60;GEL&#x60; - GEL * &#x60;GHC&#x60; - GHC * &#x60;GHS&#x60; - GHS * &#x60;GIP&#x60; - GIP * &#x60;GMD&#x60; - GMD * &#x60;GNF&#x60; - GNF * &#x60;GNS&#x60; - GNS * &#x60;GQE&#x60; - GQE * &#x60;GRD&#x60; - GRD * &#x60;GTQ&#x60; - GTQ * &#x60;GWE&#x60; - GWE * &#x60;GWP&#x60; - GWP * &#x60;GYD&#x60; - GYD * &#x60;HKD&#x60; - HKD * &#x60;HNL&#x60; - HNL * &#x60;HRD&#x60; - HRD * &#x60;HRK&#x60; - HRK * &#x60;HTG&#x60; - HTG * &#x60;HUF&#x60; - HUF * &#x60;IDR&#x60; - IDR * &#x60;IEP&#x60; - IEP * &#x60;ILP&#x60; - ILP * &#x60;ILR&#x60; - ILR * &#x60;ILS&#x60; - ILS * &#x60;INR&#x60; - INR * &#x60;IQD&#x60; - IQD * &#x60;IRR&#x60; - IRR * &#x60;ISJ&#x60; - ISJ * &#x60;ISK&#x60; - ISK * &#x60;ITL&#x60; - ITL * &#x60;JMD&#x60; - JMD * &#x60;JOD&#x60; - JOD * &#x60;JPY&#x60; - JPY * &#x60;KES&#x60; - KES * &#x60;KGS&#x60; - KGS * &#x60;KHR&#x60; - KHR * &#x60;KMF&#x60; - KMF * &#x60;KPW&#x60; - KPW * &#x60;KRH&#x60; - KRH * &#x60;KRO&#x60; - KRO * &#x60;KRW&#x60; - KRW * &#x60;KWD&#x60; - KWD * &#x60;KYD&#x60; - KYD * &#x60;KZT&#x60; - KZT * &#x60;LAK&#x60; - LAK * &#x60;LBP&#x60; - LBP * &#x60;LKR&#x60; - LKR * &#x60;LRD&#x60; - LRD * &#x60;LSL&#x60; - LSL * &#x60;LTL&#x60; - LTL * &#x60;LTT&#x60; - LTT * &#x60;LUC&#x60; - LUC * &#x60;LUF&#x60; - LUF * &#x60;LUL&#x60; - LUL * &#x60;LVL&#x60; - LVL * &#x60;LVR&#x60; - LVR * &#x60;LYD&#x60; - LYD * &#x60;MAD&#x60; - MAD * &#x60;MAF&#x60; - MAF * &#x60;MCF&#x60; - MCF * &#x60;MDC&#x60; - MDC * &#x60;MDL&#x60; - MDL * &#x60;MGA&#x60; - MGA * &#x60;MGF&#x60; - MGF * &#x60;MKD&#x60; - MKD * &#x60;MKN&#x60; - MKN * &#x60;MLF&#x60; - MLF * &#x60;MMK&#x60; - MMK * &#x60;MNT&#x60; - MNT * &#x60;MOP&#x60; - MOP * &#x60;MRO&#x60; - MRO * &#x60;MRU&#x60; - MRU * &#x60;MTL&#x60; - MTL * &#x60;MTP&#x60; - MTP * &#x60;MUR&#x60; - MUR * &#x60;MVP&#x60; - MVP * &#x60;MVR&#x60; - MVR * &#x60;MWK&#x60; - MWK * &#x60;MXN&#x60; - MXN * &#x60;MXP&#x60; - MXP * &#x60;MXV&#x60; - MXV * &#x60;MYR&#x60; - MYR * &#x60;MZE&#x60; - MZE * &#x60;MZM&#x60; - MZM * &#x60;MZN&#x60; - MZN * &#x60;NAD&#x60; - NAD * &#x60;NGN&#x60; - NGN * &#x60;NIC&#x60; - NIC * &#x60;NIO&#x60; - NIO * &#x60;NLG&#x60; - NLG * &#x60;NOK&#x60; - NOK * &#x60;NPR&#x60; - NPR * &#x60;NZD&#x60; - NZD * &#x60;OMR&#x60; - OMR * &#x60;PAB&#x60; - PAB * &#x60;PEI&#x60; - PEI * &#x60;PEN&#x60; - PEN * &#x60;PES&#x60; - PES * &#x60;PGK&#x60; - PGK * &#x60;PHP&#x60; - PHP * &#x60;PKR&#x60; - PKR * &#x60;PLN&#x60; - PLN * &#x60;PLZ&#x60; - PLZ * &#x60;PTE&#x60; - PTE * &#x60;PYG&#x60; - PYG * &#x60;QAR&#x60; - QAR * &#x60;RHD&#x60; - RHD * &#x60;ROL&#x60; - ROL * &#x60;RON&#x60; - RON * &#x60;RSD&#x60; - RSD * &#x60;RUB&#x60; - RUB * &#x60;RUR&#x60; - RUR * &#x60;RWF&#x60; - RWF * &#x60;SAR&#x60; - SAR * &#x60;SBD&#x60; - SBD * &#x60;SCR&#x60; - SCR * &#x60;SDD&#x60; - SDD * &#x60;SDG&#x60; - SDG * &#x60;SDP&#x60; - SDP * &#x60;SEK&#x60; - SEK * &#x60;SGD&#x60; - SGD * &#x60;SHP&#x60; - SHP * &#x60;SIT&#x60; - SIT * &#x60;SKK&#x60; - SKK * &#x60;SLE&#x60; - SLE * &#x60;SLL&#x60; - SLL * &#x60;SOS&#x60; - SOS * &#x60;SRD&#x60; - SRD * &#x60;SRG&#x60; - SRG * &#x60;SSP&#x60; - SSP * &#x60;STD&#x60; - STD * &#x60;STN&#x60; - STN * &#x60;SUR&#x60; - SUR * &#x60;SVC&#x60; - SVC * &#x60;SYP&#x60; - SYP * &#x60;SZL&#x60; - SZL * &#x60;THB&#x60; - THB * &#x60;TJR&#x60; - TJR * &#x60;TJS&#x60; - TJS * &#x60;TMM&#x60; - TMM * &#x60;TMT&#x60; - TMT * &#x60;TND&#x60; - TND * &#x60;TOP&#x60; - TOP * &#x60;TPE&#x60; - TPE * &#x60;TRL&#x60; - TRL * &#x60;TRY&#x60; - TRY * &#x60;TTD&#x60; - TTD * &#x60;TWD&#x60; - TWD * &#x60;TZS&#x60; - TZS * &#x60;UAH&#x60; - UAH * &#x60;UAK&#x60; - UAK * &#x60;UGS&#x60; - UGS * &#x60;UGX&#x60; - UGX * &#x60;USD&#x60; - USD * &#x60;USN&#x60; - USN * &#x60;USS&#x60; - USS * &#x60;UYI&#x60; - UYI * &#x60;UYP&#x60; - UYP * &#x60;UYU&#x60; - UYU * &#x60;UYW&#x60; - UYW * &#x60;UZS&#x60; - UZS * &#x60;VEB&#x60; - VEB * &#x60;VED&#x60; - VED * &#x60;VEF&#x60; - VEF * &#x60;VES&#x60; - VES * &#x60;VND&#x60; - VND * &#x60;VNN&#x60; - VNN * &#x60;VUV&#x60; - VUV * &#x60;WST&#x60; - WST * &#x60;XAF&#x60; - XAF * &#x60;XAG&#x60; - XAG * &#x60;XAU&#x60; - XAU * &#x60;XBA&#x60; - XBA * &#x60;XBB&#x60; - XBB * &#x60;XBC&#x60; - XBC * &#x60;XBD&#x60; - XBD * &#x60;XCD&#x60; - XCD * &#x60;XDR&#x60; - XDR * &#x60;XEU&#x60; - XEU * &#x60;XFO&#x60; - XFO * &#x60;XFU&#x60; - XFU * &#x60;XOF&#x60; - XOF * &#x60;XPD&#x60; - XPD * &#x60;XPF&#x60; - XPF * &#x60;XPT&#x60; - XPT * &#x60;XRE&#x60; - XRE * &#x60;XSU&#x60; - XSU * &#x60;XTS&#x60; - XTS * &#x60;XUA&#x60; - XUA * &#x60;XXX&#x60; - XXX * &#x60;YDD&#x60; - YDD * &#x60;YER&#x60; - YER * &#x60;YUD&#x60; - YUD * &#x60;YUM&#x60; - YUM * &#x60;YUN&#x60; - YUN * &#x60;YUR&#x60; - YUR * &#x60;ZAL&#x60; - ZAL * &#x60;ZAR&#x60; - ZAR * &#x60;ZMK&#x60; - ZMK * &#x60;ZMW&#x60; - ZMW * &#x60;ZRN&#x60; - ZRN * &#x60;ZRZ&#x60; - ZRZ * &#x60;ZWD&#x60; - ZWD * &#x60;ZWL&#x60; - ZWL * &#x60;ZWR&#x60; - ZWR (optional)
     * @param date  (optional)
     * @param dateGt  (optional)
     * @param dateGte  (optional)
     * @param dateLt  (optional)
     * @param dateLte  (optional)
     * @param dateMonth  (optional)
     * @param dateYear  (optional)
     * @param labelsTagsContains  (optional)
     * @param locationId  (optional)
     * @param locationIdIsnull  (optional)
     * @param locationOsmId  (optional)
     * @param locationOsmType * &#x60;NODE&#x60; - NODE * &#x60;WAY&#x60; - WAY * &#x60;RELATION&#x60; - RELATION (optional)
     * @param orderBy Which field to use when ordering the results. (optional)
     * @param originsTagsContains  (optional)
     * @param owner  (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param price  (optional)
     * @param priceGt  (optional)
     * @param priceGte  (optional)
     * @param priceLt  (optional)
     * @param priceLte  (optional)
     * @param priceIsDiscounted  (optional)
     * @param productCode  (optional)
     * @param productId  (optional)
     * @param productIdIsnull  (optional)
     * @param proofId  (optional)
     * @param proofIdIsnull  (optional)
     * @param size Number of results to return per page. (optional)
     * @return PaginatedPriceFullList
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun pricesList(categoryTag: kotlin.String? = null, createdGte: java.time.OffsetDateTime? = null, createdLte: java.time.OffsetDateTime? = null, currency: CurrencyPricesList? = null, date: java.time.LocalDate? = null, dateGt: java.time.LocalDate? = null, dateGte: java.time.LocalDate? = null, dateLt: java.time.LocalDate? = null, dateLte: java.time.LocalDate? = null, dateMonth: java.math.BigDecimal? = null, dateYear: java.math.BigDecimal? = null, labelsTagsContains: kotlin.String? = null, locationId: kotlin.Int? = null, locationIdIsnull: kotlin.Boolean? = null, locationOsmId: kotlin.Int? = null, locationOsmType: LocationOsmTypePricesList? = null, orderBy: kotlin.String? = null, originsTagsContains: kotlin.String? = null, owner: kotlin.String? = null, page: kotlin.Int? = null, price: java.math.BigDecimal? = null, priceGt: java.math.BigDecimal? = null, priceGte: java.math.BigDecimal? = null, priceLt: java.math.BigDecimal? = null, priceLte: java.math.BigDecimal? = null, priceIsDiscounted: kotlin.Boolean? = null, productCode: kotlin.String? = null, productId: kotlin.Int? = null, productIdIsnull: kotlin.Boolean? = null, proofId: kotlin.Int? = null, proofIdIsnull: kotlin.Boolean? = null, size: kotlin.Int? = null) : PaginatedPriceFullList {
        val localVarResponse = pricesListWithHttpInfo(categoryTag = categoryTag, createdGte = createdGte, createdLte = createdLte, currency = currency, date = date, dateGt = dateGt, dateGte = dateGte, dateLt = dateLt, dateLte = dateLte, dateMonth = dateMonth, dateYear = dateYear, labelsTagsContains = labelsTagsContains, locationId = locationId, locationIdIsnull = locationIdIsnull, locationOsmId = locationOsmId, locationOsmType = locationOsmType, orderBy = orderBy, originsTagsContains = originsTagsContains, owner = owner, page = page, price = price, priceGt = priceGt, priceGte = priceGte, priceLt = priceLt, priceLte = priceLte, priceIsDiscounted = priceIsDiscounted, productCode = productCode, productId = productId, productIdIsnull = productIdIsnull, proofId = proofId, proofIdIsnull = proofIdIsnull, size = size)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PaginatedPriceFullList
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param categoryTag  (optional)
     * @param createdGte  (optional)
     * @param createdLte  (optional)
     * @param currency * &#x60;ADP&#x60; - ADP * &#x60;AED&#x60; - AED * &#x60;AFA&#x60; - AFA * &#x60;AFN&#x60; - AFN * &#x60;ALK&#x60; - ALK * &#x60;ALL&#x60; - ALL * &#x60;AMD&#x60; - AMD * &#x60;ANG&#x60; - ANG * &#x60;AOA&#x60; - AOA * &#x60;AOK&#x60; - AOK * &#x60;AON&#x60; - AON * &#x60;AOR&#x60; - AOR * &#x60;ARA&#x60; - ARA * &#x60;ARL&#x60; - ARL * &#x60;ARM&#x60; - ARM * &#x60;ARP&#x60; - ARP * &#x60;ARS&#x60; - ARS * &#x60;ATS&#x60; - ATS * &#x60;AUD&#x60; - AUD * &#x60;AWG&#x60; - AWG * &#x60;AZM&#x60; - AZM * &#x60;AZN&#x60; - AZN * &#x60;BAD&#x60; - BAD * &#x60;BAM&#x60; - BAM * &#x60;BAN&#x60; - BAN * &#x60;BBD&#x60; - BBD * &#x60;BDT&#x60; - BDT * &#x60;BEC&#x60; - BEC * &#x60;BEF&#x60; - BEF * &#x60;BEL&#x60; - BEL * &#x60;BGL&#x60; - BGL * &#x60;BGM&#x60; - BGM * &#x60;BGN&#x60; - BGN * &#x60;BGO&#x60; - BGO * &#x60;BHD&#x60; - BHD * &#x60;BIF&#x60; - BIF * &#x60;BMD&#x60; - BMD * &#x60;BND&#x60; - BND * &#x60;BOB&#x60; - BOB * &#x60;BOL&#x60; - BOL * &#x60;BOP&#x60; - BOP * &#x60;BOV&#x60; - BOV * &#x60;BRB&#x60; - BRB * &#x60;BRC&#x60; - BRC * &#x60;BRE&#x60; - BRE * &#x60;BRL&#x60; - BRL * &#x60;BRN&#x60; - BRN * &#x60;BRR&#x60; - BRR * &#x60;BRZ&#x60; - BRZ * &#x60;BSD&#x60; - BSD * &#x60;BTN&#x60; - BTN * &#x60;BUK&#x60; - BUK * &#x60;BWP&#x60; - BWP * &#x60;BYB&#x60; - BYB * &#x60;BYN&#x60; - BYN * &#x60;BYR&#x60; - BYR * &#x60;BZD&#x60; - BZD * &#x60;CAD&#x60; - CAD * &#x60;CDF&#x60; - CDF * &#x60;CHE&#x60; - CHE * &#x60;CHF&#x60; - CHF * &#x60;CHW&#x60; - CHW * &#x60;CLE&#x60; - CLE * &#x60;CLF&#x60; - CLF * &#x60;CLP&#x60; - CLP * &#x60;CNH&#x60; - CNH * &#x60;CNX&#x60; - CNX * &#x60;CNY&#x60; - CNY * &#x60;COP&#x60; - COP * &#x60;COU&#x60; - COU * &#x60;CRC&#x60; - CRC * &#x60;CSD&#x60; - CSD * &#x60;CSK&#x60; - CSK * &#x60;CUC&#x60; - CUC * &#x60;CUP&#x60; - CUP * &#x60;CVE&#x60; - CVE * &#x60;CYP&#x60; - CYP * &#x60;CZK&#x60; - CZK * &#x60;DDM&#x60; - DDM * &#x60;DEM&#x60; - DEM * &#x60;DJF&#x60; - DJF * &#x60;DKK&#x60; - DKK * &#x60;DOP&#x60; - DOP * &#x60;DZD&#x60; - DZD * &#x60;ECS&#x60; - ECS * &#x60;ECV&#x60; - ECV * &#x60;EEK&#x60; - EEK * &#x60;EGP&#x60; - EGP * &#x60;ERN&#x60; - ERN * &#x60;ESA&#x60; - ESA * &#x60;ESB&#x60; - ESB * &#x60;ESP&#x60; - ESP * &#x60;ETB&#x60; - ETB * &#x60;EUR&#x60; - EUR * &#x60;FIM&#x60; - FIM * &#x60;FJD&#x60; - FJD * &#x60;FKP&#x60; - FKP * &#x60;FRF&#x60; - FRF * &#x60;GBP&#x60; - GBP * &#x60;GEK&#x60; - GEK * &#x60;GEL&#x60; - GEL * &#x60;GHC&#x60; - GHC * &#x60;GHS&#x60; - GHS * &#x60;GIP&#x60; - GIP * &#x60;GMD&#x60; - GMD * &#x60;GNF&#x60; - GNF * &#x60;GNS&#x60; - GNS * &#x60;GQE&#x60; - GQE * &#x60;GRD&#x60; - GRD * &#x60;GTQ&#x60; - GTQ * &#x60;GWE&#x60; - GWE * &#x60;GWP&#x60; - GWP * &#x60;GYD&#x60; - GYD * &#x60;HKD&#x60; - HKD * &#x60;HNL&#x60; - HNL * &#x60;HRD&#x60; - HRD * &#x60;HRK&#x60; - HRK * &#x60;HTG&#x60; - HTG * &#x60;HUF&#x60; - HUF * &#x60;IDR&#x60; - IDR * &#x60;IEP&#x60; - IEP * &#x60;ILP&#x60; - ILP * &#x60;ILR&#x60; - ILR * &#x60;ILS&#x60; - ILS * &#x60;INR&#x60; - INR * &#x60;IQD&#x60; - IQD * &#x60;IRR&#x60; - IRR * &#x60;ISJ&#x60; - ISJ * &#x60;ISK&#x60; - ISK * &#x60;ITL&#x60; - ITL * &#x60;JMD&#x60; - JMD * &#x60;JOD&#x60; - JOD * &#x60;JPY&#x60; - JPY * &#x60;KES&#x60; - KES * &#x60;KGS&#x60; - KGS * &#x60;KHR&#x60; - KHR * &#x60;KMF&#x60; - KMF * &#x60;KPW&#x60; - KPW * &#x60;KRH&#x60; - KRH * &#x60;KRO&#x60; - KRO * &#x60;KRW&#x60; - KRW * &#x60;KWD&#x60; - KWD * &#x60;KYD&#x60; - KYD * &#x60;KZT&#x60; - KZT * &#x60;LAK&#x60; - LAK * &#x60;LBP&#x60; - LBP * &#x60;LKR&#x60; - LKR * &#x60;LRD&#x60; - LRD * &#x60;LSL&#x60; - LSL * &#x60;LTL&#x60; - LTL * &#x60;LTT&#x60; - LTT * &#x60;LUC&#x60; - LUC * &#x60;LUF&#x60; - LUF * &#x60;LUL&#x60; - LUL * &#x60;LVL&#x60; - LVL * &#x60;LVR&#x60; - LVR * &#x60;LYD&#x60; - LYD * &#x60;MAD&#x60; - MAD * &#x60;MAF&#x60; - MAF * &#x60;MCF&#x60; - MCF * &#x60;MDC&#x60; - MDC * &#x60;MDL&#x60; - MDL * &#x60;MGA&#x60; - MGA * &#x60;MGF&#x60; - MGF * &#x60;MKD&#x60; - MKD * &#x60;MKN&#x60; - MKN * &#x60;MLF&#x60; - MLF * &#x60;MMK&#x60; - MMK * &#x60;MNT&#x60; - MNT * &#x60;MOP&#x60; - MOP * &#x60;MRO&#x60; - MRO * &#x60;MRU&#x60; - MRU * &#x60;MTL&#x60; - MTL * &#x60;MTP&#x60; - MTP * &#x60;MUR&#x60; - MUR * &#x60;MVP&#x60; - MVP * &#x60;MVR&#x60; - MVR * &#x60;MWK&#x60; - MWK * &#x60;MXN&#x60; - MXN * &#x60;MXP&#x60; - MXP * &#x60;MXV&#x60; - MXV * &#x60;MYR&#x60; - MYR * &#x60;MZE&#x60; - MZE * &#x60;MZM&#x60; - MZM * &#x60;MZN&#x60; - MZN * &#x60;NAD&#x60; - NAD * &#x60;NGN&#x60; - NGN * &#x60;NIC&#x60; - NIC * &#x60;NIO&#x60; - NIO * &#x60;NLG&#x60; - NLG * &#x60;NOK&#x60; - NOK * &#x60;NPR&#x60; - NPR * &#x60;NZD&#x60; - NZD * &#x60;OMR&#x60; - OMR * &#x60;PAB&#x60; - PAB * &#x60;PEI&#x60; - PEI * &#x60;PEN&#x60; - PEN * &#x60;PES&#x60; - PES * &#x60;PGK&#x60; - PGK * &#x60;PHP&#x60; - PHP * &#x60;PKR&#x60; - PKR * &#x60;PLN&#x60; - PLN * &#x60;PLZ&#x60; - PLZ * &#x60;PTE&#x60; - PTE * &#x60;PYG&#x60; - PYG * &#x60;QAR&#x60; - QAR * &#x60;RHD&#x60; - RHD * &#x60;ROL&#x60; - ROL * &#x60;RON&#x60; - RON * &#x60;RSD&#x60; - RSD * &#x60;RUB&#x60; - RUB * &#x60;RUR&#x60; - RUR * &#x60;RWF&#x60; - RWF * &#x60;SAR&#x60; - SAR * &#x60;SBD&#x60; - SBD * &#x60;SCR&#x60; - SCR * &#x60;SDD&#x60; - SDD * &#x60;SDG&#x60; - SDG * &#x60;SDP&#x60; - SDP * &#x60;SEK&#x60; - SEK * &#x60;SGD&#x60; - SGD * &#x60;SHP&#x60; - SHP * &#x60;SIT&#x60; - SIT * &#x60;SKK&#x60; - SKK * &#x60;SLE&#x60; - SLE * &#x60;SLL&#x60; - SLL * &#x60;SOS&#x60; - SOS * &#x60;SRD&#x60; - SRD * &#x60;SRG&#x60; - SRG * &#x60;SSP&#x60; - SSP * &#x60;STD&#x60; - STD * &#x60;STN&#x60; - STN * &#x60;SUR&#x60; - SUR * &#x60;SVC&#x60; - SVC * &#x60;SYP&#x60; - SYP * &#x60;SZL&#x60; - SZL * &#x60;THB&#x60; - THB * &#x60;TJR&#x60; - TJR * &#x60;TJS&#x60; - TJS * &#x60;TMM&#x60; - TMM * &#x60;TMT&#x60; - TMT * &#x60;TND&#x60; - TND * &#x60;TOP&#x60; - TOP * &#x60;TPE&#x60; - TPE * &#x60;TRL&#x60; - TRL * &#x60;TRY&#x60; - TRY * &#x60;TTD&#x60; - TTD * &#x60;TWD&#x60; - TWD * &#x60;TZS&#x60; - TZS * &#x60;UAH&#x60; - UAH * &#x60;UAK&#x60; - UAK * &#x60;UGS&#x60; - UGS * &#x60;UGX&#x60; - UGX * &#x60;USD&#x60; - USD * &#x60;USN&#x60; - USN * &#x60;USS&#x60; - USS * &#x60;UYI&#x60; - UYI * &#x60;UYP&#x60; - UYP * &#x60;UYU&#x60; - UYU * &#x60;UYW&#x60; - UYW * &#x60;UZS&#x60; - UZS * &#x60;VEB&#x60; - VEB * &#x60;VED&#x60; - VED * &#x60;VEF&#x60; - VEF * &#x60;VES&#x60; - VES * &#x60;VND&#x60; - VND * &#x60;VNN&#x60; - VNN * &#x60;VUV&#x60; - VUV * &#x60;WST&#x60; - WST * &#x60;XAF&#x60; - XAF * &#x60;XAG&#x60; - XAG * &#x60;XAU&#x60; - XAU * &#x60;XBA&#x60; - XBA * &#x60;XBB&#x60; - XBB * &#x60;XBC&#x60; - XBC * &#x60;XBD&#x60; - XBD * &#x60;XCD&#x60; - XCD * &#x60;XDR&#x60; - XDR * &#x60;XEU&#x60; - XEU * &#x60;XFO&#x60; - XFO * &#x60;XFU&#x60; - XFU * &#x60;XOF&#x60; - XOF * &#x60;XPD&#x60; - XPD * &#x60;XPF&#x60; - XPF * &#x60;XPT&#x60; - XPT * &#x60;XRE&#x60; - XRE * &#x60;XSU&#x60; - XSU * &#x60;XTS&#x60; - XTS * &#x60;XUA&#x60; - XUA * &#x60;XXX&#x60; - XXX * &#x60;YDD&#x60; - YDD * &#x60;YER&#x60; - YER * &#x60;YUD&#x60; - YUD * &#x60;YUM&#x60; - YUM * &#x60;YUN&#x60; - YUN * &#x60;YUR&#x60; - YUR * &#x60;ZAL&#x60; - ZAL * &#x60;ZAR&#x60; - ZAR * &#x60;ZMK&#x60; - ZMK * &#x60;ZMW&#x60; - ZMW * &#x60;ZRN&#x60; - ZRN * &#x60;ZRZ&#x60; - ZRZ * &#x60;ZWD&#x60; - ZWD * &#x60;ZWL&#x60; - ZWL * &#x60;ZWR&#x60; - ZWR (optional)
     * @param date  (optional)
     * @param dateGt  (optional)
     * @param dateGte  (optional)
     * @param dateLt  (optional)
     * @param dateLte  (optional)
     * @param dateMonth  (optional)
     * @param dateYear  (optional)
     * @param labelsTagsContains  (optional)
     * @param locationId  (optional)
     * @param locationIdIsnull  (optional)
     * @param locationOsmId  (optional)
     * @param locationOsmType * &#x60;NODE&#x60; - NODE * &#x60;WAY&#x60; - WAY * &#x60;RELATION&#x60; - RELATION (optional)
     * @param orderBy Which field to use when ordering the results. (optional)
     * @param originsTagsContains  (optional)
     * @param owner  (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param price  (optional)
     * @param priceGt  (optional)
     * @param priceGte  (optional)
     * @param priceLt  (optional)
     * @param priceLte  (optional)
     * @param priceIsDiscounted  (optional)
     * @param productCode  (optional)
     * @param productId  (optional)
     * @param productIdIsnull  (optional)
     * @param proofId  (optional)
     * @param proofIdIsnull  (optional)
     * @param size Number of results to return per page. (optional)
     * @return ApiResponse<PaginatedPriceFullList?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun pricesListWithHttpInfo(categoryTag: kotlin.String?, createdGte: java.time.OffsetDateTime?, createdLte: java.time.OffsetDateTime?, currency: CurrencyPricesList?, date: java.time.LocalDate?, dateGt: java.time.LocalDate?, dateGte: java.time.LocalDate?, dateLt: java.time.LocalDate?, dateLte: java.time.LocalDate?, dateMonth: java.math.BigDecimal?, dateYear: java.math.BigDecimal?, labelsTagsContains: kotlin.String?, locationId: kotlin.Int?, locationIdIsnull: kotlin.Boolean?, locationOsmId: kotlin.Int?, locationOsmType: LocationOsmTypePricesList?, orderBy: kotlin.String?, originsTagsContains: kotlin.String?, owner: kotlin.String?, page: kotlin.Int?, price: java.math.BigDecimal?, priceGt: java.math.BigDecimal?, priceGte: java.math.BigDecimal?, priceLt: java.math.BigDecimal?, priceLte: java.math.BigDecimal?, priceIsDiscounted: kotlin.Boolean?, productCode: kotlin.String?, productId: kotlin.Int?, productIdIsnull: kotlin.Boolean?, proofId: kotlin.Int?, proofIdIsnull: kotlin.Boolean?, size: kotlin.Int?) : ApiResponse<PaginatedPriceFullList?> {
        val localVariableConfig = pricesListRequestConfig(categoryTag = categoryTag, createdGte = createdGte, createdLte = createdLte, currency = currency, date = date, dateGt = dateGt, dateGte = dateGte, dateLt = dateLt, dateLte = dateLte, dateMonth = dateMonth, dateYear = dateYear, labelsTagsContains = labelsTagsContains, locationId = locationId, locationIdIsnull = locationIdIsnull, locationOsmId = locationOsmId, locationOsmType = locationOsmType, orderBy = orderBy, originsTagsContains = originsTagsContains, owner = owner, page = page, price = price, priceGt = priceGt, priceGte = priceGte, priceLt = priceLt, priceLte = priceLte, priceIsDiscounted = priceIsDiscounted, productCode = productCode, productId = productId, productIdIsnull = productIdIsnull, proofId = proofId, proofIdIsnull = proofIdIsnull, size = size)

        return request<Unit, PaginatedPriceFullList>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation pricesList
     *
     * @param categoryTag  (optional)
     * @param createdGte  (optional)
     * @param createdLte  (optional)
     * @param currency * &#x60;ADP&#x60; - ADP * &#x60;AED&#x60; - AED * &#x60;AFA&#x60; - AFA * &#x60;AFN&#x60; - AFN * &#x60;ALK&#x60; - ALK * &#x60;ALL&#x60; - ALL * &#x60;AMD&#x60; - AMD * &#x60;ANG&#x60; - ANG * &#x60;AOA&#x60; - AOA * &#x60;AOK&#x60; - AOK * &#x60;AON&#x60; - AON * &#x60;AOR&#x60; - AOR * &#x60;ARA&#x60; - ARA * &#x60;ARL&#x60; - ARL * &#x60;ARM&#x60; - ARM * &#x60;ARP&#x60; - ARP * &#x60;ARS&#x60; - ARS * &#x60;ATS&#x60; - ATS * &#x60;AUD&#x60; - AUD * &#x60;AWG&#x60; - AWG * &#x60;AZM&#x60; - AZM * &#x60;AZN&#x60; - AZN * &#x60;BAD&#x60; - BAD * &#x60;BAM&#x60; - BAM * &#x60;BAN&#x60; - BAN * &#x60;BBD&#x60; - BBD * &#x60;BDT&#x60; - BDT * &#x60;BEC&#x60; - BEC * &#x60;BEF&#x60; - BEF * &#x60;BEL&#x60; - BEL * &#x60;BGL&#x60; - BGL * &#x60;BGM&#x60; - BGM * &#x60;BGN&#x60; - BGN * &#x60;BGO&#x60; - BGO * &#x60;BHD&#x60; - BHD * &#x60;BIF&#x60; - BIF * &#x60;BMD&#x60; - BMD * &#x60;BND&#x60; - BND * &#x60;BOB&#x60; - BOB * &#x60;BOL&#x60; - BOL * &#x60;BOP&#x60; - BOP * &#x60;BOV&#x60; - BOV * &#x60;BRB&#x60; - BRB * &#x60;BRC&#x60; - BRC * &#x60;BRE&#x60; - BRE * &#x60;BRL&#x60; - BRL * &#x60;BRN&#x60; - BRN * &#x60;BRR&#x60; - BRR * &#x60;BRZ&#x60; - BRZ * &#x60;BSD&#x60; - BSD * &#x60;BTN&#x60; - BTN * &#x60;BUK&#x60; - BUK * &#x60;BWP&#x60; - BWP * &#x60;BYB&#x60; - BYB * &#x60;BYN&#x60; - BYN * &#x60;BYR&#x60; - BYR * &#x60;BZD&#x60; - BZD * &#x60;CAD&#x60; - CAD * &#x60;CDF&#x60; - CDF * &#x60;CHE&#x60; - CHE * &#x60;CHF&#x60; - CHF * &#x60;CHW&#x60; - CHW * &#x60;CLE&#x60; - CLE * &#x60;CLF&#x60; - CLF * &#x60;CLP&#x60; - CLP * &#x60;CNH&#x60; - CNH * &#x60;CNX&#x60; - CNX * &#x60;CNY&#x60; - CNY * &#x60;COP&#x60; - COP * &#x60;COU&#x60; - COU * &#x60;CRC&#x60; - CRC * &#x60;CSD&#x60; - CSD * &#x60;CSK&#x60; - CSK * &#x60;CUC&#x60; - CUC * &#x60;CUP&#x60; - CUP * &#x60;CVE&#x60; - CVE * &#x60;CYP&#x60; - CYP * &#x60;CZK&#x60; - CZK * &#x60;DDM&#x60; - DDM * &#x60;DEM&#x60; - DEM * &#x60;DJF&#x60; - DJF * &#x60;DKK&#x60; - DKK * &#x60;DOP&#x60; - DOP * &#x60;DZD&#x60; - DZD * &#x60;ECS&#x60; - ECS * &#x60;ECV&#x60; - ECV * &#x60;EEK&#x60; - EEK * &#x60;EGP&#x60; - EGP * &#x60;ERN&#x60; - ERN * &#x60;ESA&#x60; - ESA * &#x60;ESB&#x60; - ESB * &#x60;ESP&#x60; - ESP * &#x60;ETB&#x60; - ETB * &#x60;EUR&#x60; - EUR * &#x60;FIM&#x60; - FIM * &#x60;FJD&#x60; - FJD * &#x60;FKP&#x60; - FKP * &#x60;FRF&#x60; - FRF * &#x60;GBP&#x60; - GBP * &#x60;GEK&#x60; - GEK * &#x60;GEL&#x60; - GEL * &#x60;GHC&#x60; - GHC * &#x60;GHS&#x60; - GHS * &#x60;GIP&#x60; - GIP * &#x60;GMD&#x60; - GMD * &#x60;GNF&#x60; - GNF * &#x60;GNS&#x60; - GNS * &#x60;GQE&#x60; - GQE * &#x60;GRD&#x60; - GRD * &#x60;GTQ&#x60; - GTQ * &#x60;GWE&#x60; - GWE * &#x60;GWP&#x60; - GWP * &#x60;GYD&#x60; - GYD * &#x60;HKD&#x60; - HKD * &#x60;HNL&#x60; - HNL * &#x60;HRD&#x60; - HRD * &#x60;HRK&#x60; - HRK * &#x60;HTG&#x60; - HTG * &#x60;HUF&#x60; - HUF * &#x60;IDR&#x60; - IDR * &#x60;IEP&#x60; - IEP * &#x60;ILP&#x60; - ILP * &#x60;ILR&#x60; - ILR * &#x60;ILS&#x60; - ILS * &#x60;INR&#x60; - INR * &#x60;IQD&#x60; - IQD * &#x60;IRR&#x60; - IRR * &#x60;ISJ&#x60; - ISJ * &#x60;ISK&#x60; - ISK * &#x60;ITL&#x60; - ITL * &#x60;JMD&#x60; - JMD * &#x60;JOD&#x60; - JOD * &#x60;JPY&#x60; - JPY * &#x60;KES&#x60; - KES * &#x60;KGS&#x60; - KGS * &#x60;KHR&#x60; - KHR * &#x60;KMF&#x60; - KMF * &#x60;KPW&#x60; - KPW * &#x60;KRH&#x60; - KRH * &#x60;KRO&#x60; - KRO * &#x60;KRW&#x60; - KRW * &#x60;KWD&#x60; - KWD * &#x60;KYD&#x60; - KYD * &#x60;KZT&#x60; - KZT * &#x60;LAK&#x60; - LAK * &#x60;LBP&#x60; - LBP * &#x60;LKR&#x60; - LKR * &#x60;LRD&#x60; - LRD * &#x60;LSL&#x60; - LSL * &#x60;LTL&#x60; - LTL * &#x60;LTT&#x60; - LTT * &#x60;LUC&#x60; - LUC * &#x60;LUF&#x60; - LUF * &#x60;LUL&#x60; - LUL * &#x60;LVL&#x60; - LVL * &#x60;LVR&#x60; - LVR * &#x60;LYD&#x60; - LYD * &#x60;MAD&#x60; - MAD * &#x60;MAF&#x60; - MAF * &#x60;MCF&#x60; - MCF * &#x60;MDC&#x60; - MDC * &#x60;MDL&#x60; - MDL * &#x60;MGA&#x60; - MGA * &#x60;MGF&#x60; - MGF * &#x60;MKD&#x60; - MKD * &#x60;MKN&#x60; - MKN * &#x60;MLF&#x60; - MLF * &#x60;MMK&#x60; - MMK * &#x60;MNT&#x60; - MNT * &#x60;MOP&#x60; - MOP * &#x60;MRO&#x60; - MRO * &#x60;MRU&#x60; - MRU * &#x60;MTL&#x60; - MTL * &#x60;MTP&#x60; - MTP * &#x60;MUR&#x60; - MUR * &#x60;MVP&#x60; - MVP * &#x60;MVR&#x60; - MVR * &#x60;MWK&#x60; - MWK * &#x60;MXN&#x60; - MXN * &#x60;MXP&#x60; - MXP * &#x60;MXV&#x60; - MXV * &#x60;MYR&#x60; - MYR * &#x60;MZE&#x60; - MZE * &#x60;MZM&#x60; - MZM * &#x60;MZN&#x60; - MZN * &#x60;NAD&#x60; - NAD * &#x60;NGN&#x60; - NGN * &#x60;NIC&#x60; - NIC * &#x60;NIO&#x60; - NIO * &#x60;NLG&#x60; - NLG * &#x60;NOK&#x60; - NOK * &#x60;NPR&#x60; - NPR * &#x60;NZD&#x60; - NZD * &#x60;OMR&#x60; - OMR * &#x60;PAB&#x60; - PAB * &#x60;PEI&#x60; - PEI * &#x60;PEN&#x60; - PEN * &#x60;PES&#x60; - PES * &#x60;PGK&#x60; - PGK * &#x60;PHP&#x60; - PHP * &#x60;PKR&#x60; - PKR * &#x60;PLN&#x60; - PLN * &#x60;PLZ&#x60; - PLZ * &#x60;PTE&#x60; - PTE * &#x60;PYG&#x60; - PYG * &#x60;QAR&#x60; - QAR * &#x60;RHD&#x60; - RHD * &#x60;ROL&#x60; - ROL * &#x60;RON&#x60; - RON * &#x60;RSD&#x60; - RSD * &#x60;RUB&#x60; - RUB * &#x60;RUR&#x60; - RUR * &#x60;RWF&#x60; - RWF * &#x60;SAR&#x60; - SAR * &#x60;SBD&#x60; - SBD * &#x60;SCR&#x60; - SCR * &#x60;SDD&#x60; - SDD * &#x60;SDG&#x60; - SDG * &#x60;SDP&#x60; - SDP * &#x60;SEK&#x60; - SEK * &#x60;SGD&#x60; - SGD * &#x60;SHP&#x60; - SHP * &#x60;SIT&#x60; - SIT * &#x60;SKK&#x60; - SKK * &#x60;SLE&#x60; - SLE * &#x60;SLL&#x60; - SLL * &#x60;SOS&#x60; - SOS * &#x60;SRD&#x60; - SRD * &#x60;SRG&#x60; - SRG * &#x60;SSP&#x60; - SSP * &#x60;STD&#x60; - STD * &#x60;STN&#x60; - STN * &#x60;SUR&#x60; - SUR * &#x60;SVC&#x60; - SVC * &#x60;SYP&#x60; - SYP * &#x60;SZL&#x60; - SZL * &#x60;THB&#x60; - THB * &#x60;TJR&#x60; - TJR * &#x60;TJS&#x60; - TJS * &#x60;TMM&#x60; - TMM * &#x60;TMT&#x60; - TMT * &#x60;TND&#x60; - TND * &#x60;TOP&#x60; - TOP * &#x60;TPE&#x60; - TPE * &#x60;TRL&#x60; - TRL * &#x60;TRY&#x60; - TRY * &#x60;TTD&#x60; - TTD * &#x60;TWD&#x60; - TWD * &#x60;TZS&#x60; - TZS * &#x60;UAH&#x60; - UAH * &#x60;UAK&#x60; - UAK * &#x60;UGS&#x60; - UGS * &#x60;UGX&#x60; - UGX * &#x60;USD&#x60; - USD * &#x60;USN&#x60; - USN * &#x60;USS&#x60; - USS * &#x60;UYI&#x60; - UYI * &#x60;UYP&#x60; - UYP * &#x60;UYU&#x60; - UYU * &#x60;UYW&#x60; - UYW * &#x60;UZS&#x60; - UZS * &#x60;VEB&#x60; - VEB * &#x60;VED&#x60; - VED * &#x60;VEF&#x60; - VEF * &#x60;VES&#x60; - VES * &#x60;VND&#x60; - VND * &#x60;VNN&#x60; - VNN * &#x60;VUV&#x60; - VUV * &#x60;WST&#x60; - WST * &#x60;XAF&#x60; - XAF * &#x60;XAG&#x60; - XAG * &#x60;XAU&#x60; - XAU * &#x60;XBA&#x60; - XBA * &#x60;XBB&#x60; - XBB * &#x60;XBC&#x60; - XBC * &#x60;XBD&#x60; - XBD * &#x60;XCD&#x60; - XCD * &#x60;XDR&#x60; - XDR * &#x60;XEU&#x60; - XEU * &#x60;XFO&#x60; - XFO * &#x60;XFU&#x60; - XFU * &#x60;XOF&#x60; - XOF * &#x60;XPD&#x60; - XPD * &#x60;XPF&#x60; - XPF * &#x60;XPT&#x60; - XPT * &#x60;XRE&#x60; - XRE * &#x60;XSU&#x60; - XSU * &#x60;XTS&#x60; - XTS * &#x60;XUA&#x60; - XUA * &#x60;XXX&#x60; - XXX * &#x60;YDD&#x60; - YDD * &#x60;YER&#x60; - YER * &#x60;YUD&#x60; - YUD * &#x60;YUM&#x60; - YUM * &#x60;YUN&#x60; - YUN * &#x60;YUR&#x60; - YUR * &#x60;ZAL&#x60; - ZAL * &#x60;ZAR&#x60; - ZAR * &#x60;ZMK&#x60; - ZMK * &#x60;ZMW&#x60; - ZMW * &#x60;ZRN&#x60; - ZRN * &#x60;ZRZ&#x60; - ZRZ * &#x60;ZWD&#x60; - ZWD * &#x60;ZWL&#x60; - ZWL * &#x60;ZWR&#x60; - ZWR (optional)
     * @param date  (optional)
     * @param dateGt  (optional)
     * @param dateGte  (optional)
     * @param dateLt  (optional)
     * @param dateLte  (optional)
     * @param dateMonth  (optional)
     * @param dateYear  (optional)
     * @param labelsTagsContains  (optional)
     * @param locationId  (optional)
     * @param locationIdIsnull  (optional)
     * @param locationOsmId  (optional)
     * @param locationOsmType * &#x60;NODE&#x60; - NODE * &#x60;WAY&#x60; - WAY * &#x60;RELATION&#x60; - RELATION (optional)
     * @param orderBy Which field to use when ordering the results. (optional)
     * @param originsTagsContains  (optional)
     * @param owner  (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param price  (optional)
     * @param priceGt  (optional)
     * @param priceGte  (optional)
     * @param priceLt  (optional)
     * @param priceLte  (optional)
     * @param priceIsDiscounted  (optional)
     * @param productCode  (optional)
     * @param productId  (optional)
     * @param productIdIsnull  (optional)
     * @param proofId  (optional)
     * @param proofIdIsnull  (optional)
     * @param size Number of results to return per page. (optional)
     * @return RequestConfig
     */
    fun pricesListRequestConfig(categoryTag: kotlin.String?, createdGte: java.time.OffsetDateTime?, createdLte: java.time.OffsetDateTime?, currency: CurrencyPricesList?, date: java.time.LocalDate?, dateGt: java.time.LocalDate?, dateGte: java.time.LocalDate?, dateLt: java.time.LocalDate?, dateLte: java.time.LocalDate?, dateMonth: java.math.BigDecimal?, dateYear: java.math.BigDecimal?, labelsTagsContains: kotlin.String?, locationId: kotlin.Int?, locationIdIsnull: kotlin.Boolean?, locationOsmId: kotlin.Int?, locationOsmType: LocationOsmTypePricesList?, orderBy: kotlin.String?, originsTagsContains: kotlin.String?, owner: kotlin.String?, page: kotlin.Int?, price: java.math.BigDecimal?, priceGt: java.math.BigDecimal?, priceGte: java.math.BigDecimal?, priceLt: java.math.BigDecimal?, priceLte: java.math.BigDecimal?, priceIsDiscounted: kotlin.Boolean?, productCode: kotlin.String?, productId: kotlin.Int?, productIdIsnull: kotlin.Boolean?, proofId: kotlin.Int?, proofIdIsnull: kotlin.Boolean?, size: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (categoryTag != null) {
                    put("category_tag", listOf(categoryTag.toString()))
                }
                if (createdGte != null) {
                    put("created__gte", listOf(parseDateToQueryString(createdGte)))
                }
                if (createdLte != null) {
                    put("created__lte", listOf(parseDateToQueryString(createdLte)))
                }
                if (currency != null) {
                    put("currency", listOf(currency.value))
                }
                if (date != null) {
                    put("date", listOf(parseDateToQueryString(date)))
                }
                if (dateGt != null) {
                    put("date__gt", listOf(parseDateToQueryString(dateGt)))
                }
                if (dateGte != null) {
                    put("date__gte", listOf(parseDateToQueryString(dateGte)))
                }
                if (dateLt != null) {
                    put("date__lt", listOf(parseDateToQueryString(dateLt)))
                }
                if (dateLte != null) {
                    put("date__lte", listOf(parseDateToQueryString(dateLte)))
                }
                if (dateMonth != null) {
                    put("date__month", listOf(dateMonth.toString()))
                }
                if (dateYear != null) {
                    put("date__year", listOf(dateYear.toString()))
                }
                if (labelsTagsContains != null) {
                    put("labels_tags__contains", listOf(labelsTagsContains.toString()))
                }
                if (locationId != null) {
                    put("location_id", listOf(locationId.toString()))
                }
                if (locationIdIsnull != null) {
                    put("location_id__isnull", listOf(locationIdIsnull.toString()))
                }
                if (locationOsmId != null) {
                    put("location_osm_id", listOf(locationOsmId.toString()))
                }
                if (locationOsmType != null) {
                    put("location_osm_type", listOf(locationOsmType.value))
                }
                if (orderBy != null) {
                    put("order_by", listOf(orderBy.toString()))
                }
                if (originsTagsContains != null) {
                    put("origins_tags__contains", listOf(originsTagsContains.toString()))
                }
                if (owner != null) {
                    put("owner", listOf(owner.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (price != null) {
                    put("price", listOf(price.toString()))
                }
                if (priceGt != null) {
                    put("price__gt", listOf(priceGt.toString()))
                }
                if (priceGte != null) {
                    put("price__gte", listOf(priceGte.toString()))
                }
                if (priceLt != null) {
                    put("price__lt", listOf(priceLt.toString()))
                }
                if (priceLte != null) {
                    put("price__lte", listOf(priceLte.toString()))
                }
                if (priceIsDiscounted != null) {
                    put("price_is_discounted", listOf(priceIsDiscounted.toString()))
                }
                if (productCode != null) {
                    put("product_code", listOf(productCode.toString()))
                }
                if (productId != null) {
                    put("product_id", listOf(productId.toString()))
                }
                if (productIdIsnull != null) {
                    put("product_id__isnull", listOf(productIdIsnull.toString()))
                }
                if (proofId != null) {
                    put("proof_id", listOf(proofId.toString()))
                }
                if (proofIdIsnull != null) {
                    put("proof_id__isnull", listOf(proofIdIsnull.toString()))
                }
                if (size != null) {
                    put("size", listOf(size.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/prices",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this Price.
     * @param patchedPriceUpdate  (optional)
     * @return PriceUpdate
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun pricesPartialUpdate(id: kotlin.Int, patchedPriceUpdate: PatchedPriceUpdate? = null) : PriceUpdate {
        val localVarResponse = pricesPartialUpdateWithHttpInfo(id = id, patchedPriceUpdate = patchedPriceUpdate)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PriceUpdate
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this Price.
     * @param patchedPriceUpdate  (optional)
     * @return ApiResponse<PriceUpdate?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun pricesPartialUpdateWithHttpInfo(id: kotlin.Int, patchedPriceUpdate: PatchedPriceUpdate?) : ApiResponse<PriceUpdate?> {
        val localVariableConfig = pricesPartialUpdateRequestConfig(id = id, patchedPriceUpdate = patchedPriceUpdate)

        return request<PatchedPriceUpdate, PriceUpdate>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation pricesPartialUpdate
     *
     * @param id A unique integer value identifying this Price.
     * @param patchedPriceUpdate  (optional)
     * @return RequestConfig
     */
    fun pricesPartialUpdateRequestConfig(id: kotlin.Int, patchedPriceUpdate: PatchedPriceUpdate?) : RequestConfig<PatchedPriceUpdate> {
        val localVariableBody = patchedPriceUpdate
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/api/v1/prices/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this Price.
     * @return PriceFull
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun pricesRetrieve(id: kotlin.Int) : PriceFull {
        val localVarResponse = pricesRetrieveWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PriceFull
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this Price.
     * @return ApiResponse<PriceFull?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun pricesRetrieveWithHttpInfo(id: kotlin.Int) : ApiResponse<PriceFull?> {
        val localVariableConfig = pricesRetrieveRequestConfig(id = id)

        return request<Unit, PriceFull>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation pricesRetrieve
     *
     * @param id A unique integer value identifying this Price.
     * @return RequestConfig
     */
    fun pricesRetrieveRequestConfig(id: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/prices/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter currency
     */
     enum class CurrencyPricesStatsRetrieve(val value: kotlin.String) {
         @Json(name = "ADP") ADP("ADP"),
         @Json(name = "AED") AED("AED"),
         @Json(name = "AFA") AFA("AFA"),
         @Json(name = "AFN") AFN("AFN"),
         @Json(name = "ALK") ALK("ALK"),
         @Json(name = "ALL") ALL("ALL"),
         @Json(name = "AMD") AMD("AMD"),
         @Json(name = "ANG") ANG("ANG"),
         @Json(name = "AOA") AOA("AOA"),
         @Json(name = "AOK") AOK("AOK"),
         @Json(name = "AON") AON("AON"),
         @Json(name = "AOR") AOR("AOR"),
         @Json(name = "ARA") ARA("ARA"),
         @Json(name = "ARL") ARL("ARL"),
         @Json(name = "ARM") ARM("ARM"),
         @Json(name = "ARP") ARP("ARP"),
         @Json(name = "ARS") ARS("ARS"),
         @Json(name = "ATS") ATS("ATS"),
         @Json(name = "AUD") AUD("AUD"),
         @Json(name = "AWG") AWG("AWG"),
         @Json(name = "AZM") AZM("AZM"),
         @Json(name = "AZN") AZN("AZN"),
         @Json(name = "BAD") BAD("BAD"),
         @Json(name = "BAM") BAM("BAM"),
         @Json(name = "BAN") BAN("BAN"),
         @Json(name = "BBD") BBD("BBD"),
         @Json(name = "BDT") BDT("BDT"),
         @Json(name = "BEC") BEC("BEC"),
         @Json(name = "BEF") BEF("BEF"),
         @Json(name = "BEL") BEL("BEL"),
         @Json(name = "BGL") BGL("BGL"),
         @Json(name = "BGM") BGM("BGM"),
         @Json(name = "BGN") BGN("BGN"),
         @Json(name = "BGO") BGO("BGO"),
         @Json(name = "BHD") BHD("BHD"),
         @Json(name = "BIF") BIF("BIF"),
         @Json(name = "BMD") BMD("BMD"),
         @Json(name = "BND") BND("BND"),
         @Json(name = "BOB") BOB("BOB"),
         @Json(name = "BOL") BOL("BOL"),
         @Json(name = "BOP") BOP("BOP"),
         @Json(name = "BOV") BOV("BOV"),
         @Json(name = "BRB") BRB("BRB"),
         @Json(name = "BRC") BRC("BRC"),
         @Json(name = "BRE") BRE("BRE"),
         @Json(name = "BRL") BRL("BRL"),
         @Json(name = "BRN") BRN("BRN"),
         @Json(name = "BRR") BRR("BRR"),
         @Json(name = "BRZ") BRZ("BRZ"),
         @Json(name = "BSD") BSD("BSD"),
         @Json(name = "BTN") BTN("BTN"),
         @Json(name = "BUK") BUK("BUK"),
         @Json(name = "BWP") BWP("BWP"),
         @Json(name = "BYB") BYB("BYB"),
         @Json(name = "BYN") BYN("BYN"),
         @Json(name = "BYR") BYR("BYR"),
         @Json(name = "BZD") BZD("BZD"),
         @Json(name = "CAD") CAD("CAD"),
         @Json(name = "CDF") CDF("CDF"),
         @Json(name = "CHE") CHE("CHE"),
         @Json(name = "CHF") CHF("CHF"),
         @Json(name = "CHW") CHW("CHW"),
         @Json(name = "CLE") CLE("CLE"),
         @Json(name = "CLF") CLF("CLF"),
         @Json(name = "CLP") CLP("CLP"),
         @Json(name = "CNH") CNH("CNH"),
         @Json(name = "CNX") CNX("CNX"),
         @Json(name = "CNY") CNY("CNY"),
         @Json(name = "COP") COP("COP"),
         @Json(name = "COU") COU("COU"),
         @Json(name = "CRC") CRC("CRC"),
         @Json(name = "CSD") CSD("CSD"),
         @Json(name = "CSK") CSK("CSK"),
         @Json(name = "CUC") CUC("CUC"),
         @Json(name = "CUP") CUP("CUP"),
         @Json(name = "CVE") CVE("CVE"),
         @Json(name = "CYP") CYP("CYP"),
         @Json(name = "CZK") CZK("CZK"),
         @Json(name = "DDM") DDM("DDM"),
         @Json(name = "DEM") DEM("DEM"),
         @Json(name = "DJF") DJF("DJF"),
         @Json(name = "DKK") DKK("DKK"),
         @Json(name = "DOP") DOP("DOP"),
         @Json(name = "DZD") DZD("DZD"),
         @Json(name = "ECS") ECS("ECS"),
         @Json(name = "ECV") ECV("ECV"),
         @Json(name = "EEK") EEK("EEK"),
         @Json(name = "EGP") EGP("EGP"),
         @Json(name = "ERN") ERN("ERN"),
         @Json(name = "ESA") ESA("ESA"),
         @Json(name = "ESB") ESB("ESB"),
         @Json(name = "ESP") ESP("ESP"),
         @Json(name = "ETB") ETB("ETB"),
         @Json(name = "EUR") EUR("EUR"),
         @Json(name = "FIM") FIM("FIM"),
         @Json(name = "FJD") FJD("FJD"),
         @Json(name = "FKP") FKP("FKP"),
         @Json(name = "FRF") FRF("FRF"),
         @Json(name = "GBP") GBP("GBP"),
         @Json(name = "GEK") GEK("GEK"),
         @Json(name = "GEL") GEL("GEL"),
         @Json(name = "GHC") GHC("GHC"),
         @Json(name = "GHS") GHS("GHS"),
         @Json(name = "GIP") GIP("GIP"),
         @Json(name = "GMD") GMD("GMD"),
         @Json(name = "GNF") GNF("GNF"),
         @Json(name = "GNS") GNS("GNS"),
         @Json(name = "GQE") GQE("GQE"),
         @Json(name = "GRD") GRD("GRD"),
         @Json(name = "GTQ") GTQ("GTQ"),
         @Json(name = "GWE") GWE("GWE"),
         @Json(name = "GWP") GWP("GWP"),
         @Json(name = "GYD") GYD("GYD"),
         @Json(name = "HKD") HKD("HKD"),
         @Json(name = "HNL") HNL("HNL"),
         @Json(name = "HRD") HRD("HRD"),
         @Json(name = "HRK") HRK("HRK"),
         @Json(name = "HTG") HTG("HTG"),
         @Json(name = "HUF") HUF("HUF"),
         @Json(name = "IDR") IDR("IDR"),
         @Json(name = "IEP") IEP("IEP"),
         @Json(name = "ILP") ILP("ILP"),
         @Json(name = "ILR") ILR("ILR"),
         @Json(name = "ILS") ILS("ILS"),
         @Json(name = "INR") INR("INR"),
         @Json(name = "IQD") IQD("IQD"),
         @Json(name = "IRR") IRR("IRR"),
         @Json(name = "ISJ") ISJ("ISJ"),
         @Json(name = "ISK") ISK("ISK"),
         @Json(name = "ITL") ITL("ITL"),
         @Json(name = "JMD") JMD("JMD"),
         @Json(name = "JOD") JOD("JOD"),
         @Json(name = "JPY") JPY("JPY"),
         @Json(name = "KES") KES("KES"),
         @Json(name = "KGS") KGS("KGS"),
         @Json(name = "KHR") KHR("KHR"),
         @Json(name = "KMF") KMF("KMF"),
         @Json(name = "KPW") KPW("KPW"),
         @Json(name = "KRH") KRH("KRH"),
         @Json(name = "KRO") KRO("KRO"),
         @Json(name = "KRW") KRW("KRW"),
         @Json(name = "KWD") KWD("KWD"),
         @Json(name = "KYD") KYD("KYD"),
         @Json(name = "KZT") KZT("KZT"),
         @Json(name = "LAK") LAK("LAK"),
         @Json(name = "LBP") LBP("LBP"),
         @Json(name = "LKR") LKR("LKR"),
         @Json(name = "LRD") LRD("LRD"),
         @Json(name = "LSL") LSL("LSL"),
         @Json(name = "LTL") LTL("LTL"),
         @Json(name = "LTT") LTT("LTT"),
         @Json(name = "LUC") LUC("LUC"),
         @Json(name = "LUF") LUF("LUF"),
         @Json(name = "LUL") LUL("LUL"),
         @Json(name = "LVL") LVL("LVL"),
         @Json(name = "LVR") LVR("LVR"),
         @Json(name = "LYD") LYD("LYD"),
         @Json(name = "MAD") MAD("MAD"),
         @Json(name = "MAF") MAF("MAF"),
         @Json(name = "MCF") MCF("MCF"),
         @Json(name = "MDC") MDC("MDC"),
         @Json(name = "MDL") MDL("MDL"),
         @Json(name = "MGA") MGA("MGA"),
         @Json(name = "MGF") MGF("MGF"),
         @Json(name = "MKD") MKD("MKD"),
         @Json(name = "MKN") MKN("MKN"),
         @Json(name = "MLF") MLF("MLF"),
         @Json(name = "MMK") MMK("MMK"),
         @Json(name = "MNT") MNT("MNT"),
         @Json(name = "MOP") MOP("MOP"),
         @Json(name = "MRO") MRO("MRO"),
         @Json(name = "MRU") MRU("MRU"),
         @Json(name = "MTL") MTL("MTL"),
         @Json(name = "MTP") MTP("MTP"),
         @Json(name = "MUR") MUR("MUR"),
         @Json(name = "MVP") MVP("MVP"),
         @Json(name = "MVR") MVR("MVR"),
         @Json(name = "MWK") MWK("MWK"),
         @Json(name = "MXN") MXN("MXN"),
         @Json(name = "MXP") MXP("MXP"),
         @Json(name = "MXV") MXV("MXV"),
         @Json(name = "MYR") MYR("MYR"),
         @Json(name = "MZE") MZE("MZE"),
         @Json(name = "MZM") MZM("MZM"),
         @Json(name = "MZN") MZN("MZN"),
         @Json(name = "NAD") NAD("NAD"),
         @Json(name = "NGN") NGN("NGN"),
         @Json(name = "NIC") NIC("NIC"),
         @Json(name = "NIO") NIO("NIO"),
         @Json(name = "NLG") NLG("NLG"),
         @Json(name = "NOK") NOK("NOK"),
         @Json(name = "NPR") NPR("NPR"),
         @Json(name = "NZD") NZD("NZD"),
         @Json(name = "OMR") OMR("OMR"),
         @Json(name = "PAB") PAB("PAB"),
         @Json(name = "PEI") PEI("PEI"),
         @Json(name = "PEN") PEN("PEN"),
         @Json(name = "PES") PES("PES"),
         @Json(name = "PGK") PGK("PGK"),
         @Json(name = "PHP") PHP("PHP"),
         @Json(name = "PKR") PKR("PKR"),
         @Json(name = "PLN") PLN("PLN"),
         @Json(name = "PLZ") PLZ("PLZ"),
         @Json(name = "PTE") PTE("PTE"),
         @Json(name = "PYG") PYG("PYG"),
         @Json(name = "QAR") QAR("QAR"),
         @Json(name = "RHD") RHD("RHD"),
         @Json(name = "ROL") ROL("ROL"),
         @Json(name = "RON") RON("RON"),
         @Json(name = "RSD") RSD("RSD"),
         @Json(name = "RUB") RUB("RUB"),
         @Json(name = "RUR") RUR("RUR"),
         @Json(name = "RWF") RWF("RWF"),
         @Json(name = "SAR") SAR("SAR"),
         @Json(name = "SBD") SBD("SBD"),
         @Json(name = "SCR") SCR("SCR"),
         @Json(name = "SDD") SDD("SDD"),
         @Json(name = "SDG") SDG("SDG"),
         @Json(name = "SDP") SDP("SDP"),
         @Json(name = "SEK") SEK("SEK"),
         @Json(name = "SGD") SGD("SGD"),
         @Json(name = "SHP") SHP("SHP"),
         @Json(name = "SIT") SIT("SIT"),
         @Json(name = "SKK") SKK("SKK"),
         @Json(name = "SLE") SLE("SLE"),
         @Json(name = "SLL") SLL("SLL"),
         @Json(name = "SOS") SOS("SOS"),
         @Json(name = "SRD") SRD("SRD"),
         @Json(name = "SRG") SRG("SRG"),
         @Json(name = "SSP") SSP("SSP"),
         @Json(name = "STD") STD("STD"),
         @Json(name = "STN") STN("STN"),
         @Json(name = "SUR") SUR("SUR"),
         @Json(name = "SVC") SVC("SVC"),
         @Json(name = "SYP") SYP("SYP"),
         @Json(name = "SZL") SZL("SZL"),
         @Json(name = "THB") THB("THB"),
         @Json(name = "TJR") TJR("TJR"),
         @Json(name = "TJS") TJS("TJS"),
         @Json(name = "TMM") TMM("TMM"),
         @Json(name = "TMT") TMT("TMT"),
         @Json(name = "TND") TND("TND"),
         @Json(name = "TOP") TOP("TOP"),
         @Json(name = "TPE") TPE("TPE"),
         @Json(name = "TRL") TRL("TRL"),
         @Json(name = "TRY") TRY("TRY"),
         @Json(name = "TTD") TTD("TTD"),
         @Json(name = "TWD") TWD("TWD"),
         @Json(name = "TZS") TZS("TZS"),
         @Json(name = "UAH") UAH("UAH"),
         @Json(name = "UAK") UAK("UAK"),
         @Json(name = "UGS") UGS("UGS"),
         @Json(name = "UGX") UGX("UGX"),
         @Json(name = "USD") USD("USD"),
         @Json(name = "USN") USN("USN"),
         @Json(name = "USS") USS("USS"),
         @Json(name = "UYI") UYI("UYI"),
         @Json(name = "UYP") UYP("UYP"),
         @Json(name = "UYU") UYU("UYU"),
         @Json(name = "UYW") UYW("UYW"),
         @Json(name = "UZS") UZS("UZS"),
         @Json(name = "VEB") VEB("VEB"),
         @Json(name = "VED") VED("VED"),
         @Json(name = "VEF") VEF("VEF"),
         @Json(name = "VES") VES("VES"),
         @Json(name = "VND") VND("VND"),
         @Json(name = "VNN") VNN("VNN"),
         @Json(name = "VUV") VUV("VUV"),
         @Json(name = "WST") WST("WST"),
         @Json(name = "XAF") XAF("XAF"),
         @Json(name = "XAG") XAG("XAG"),
         @Json(name = "XAU") XAU("XAU"),
         @Json(name = "XBA") XBA("XBA"),
         @Json(name = "XBB") XBB("XBB"),
         @Json(name = "XBC") XBC("XBC"),
         @Json(name = "XBD") XBD("XBD"),
         @Json(name = "XCD") XCD("XCD"),
         @Json(name = "XDR") XDR("XDR"),
         @Json(name = "XEU") XEU("XEU"),
         @Json(name = "XFO") XFO("XFO"),
         @Json(name = "XFU") XFU("XFU"),
         @Json(name = "XOF") XOF("XOF"),
         @Json(name = "XPD") XPD("XPD"),
         @Json(name = "XPF") XPF("XPF"),
         @Json(name = "XPT") XPT("XPT"),
         @Json(name = "XRE") XRE("XRE"),
         @Json(name = "XSU") XSU("XSU"),
         @Json(name = "XTS") XTS("XTS"),
         @Json(name = "XUA") XUA("XUA"),
         @Json(name = "XXX") XXX("XXX"),
         @Json(name = "YDD") YDD("YDD"),
         @Json(name = "YER") YER("YER"),
         @Json(name = "YUD") YUD("YUD"),
         @Json(name = "YUM") YUM("YUM"),
         @Json(name = "YUN") YUN("YUN"),
         @Json(name = "YUR") YUR("YUR"),
         @Json(name = "ZAL") ZAL("ZAL"),
         @Json(name = "ZAR") ZAR("ZAR"),
         @Json(name = "ZMK") ZMK("ZMK"),
         @Json(name = "ZMW") ZMW("ZMW"),
         @Json(name = "ZRN") ZRN("ZRN"),
         @Json(name = "ZRZ") ZRZ("ZRZ"),
         @Json(name = "ZWD") ZWD("ZWD"),
         @Json(name = "ZWL") ZWL("ZWL"),
         @Json(name = "ZWR") ZWR("ZWR")
     }

    /**
     * enum for parameter locationOsmType
     */
     enum class LocationOsmTypePricesStatsRetrieve(val value: kotlin.String) {
         @Json(name = "NODE") NODE("NODE"),
         @Json(name = "RELATION") RELATION("RELATION"),
         @Json(name = "WAY") WAY("WAY")
     }

    /**
     * 
     * 
     * @param categoryTag  (optional)
     * @param createdGte  (optional)
     * @param createdLte  (optional)
     * @param currency * &#x60;ADP&#x60; - ADP * &#x60;AED&#x60; - AED * &#x60;AFA&#x60; - AFA * &#x60;AFN&#x60; - AFN * &#x60;ALK&#x60; - ALK * &#x60;ALL&#x60; - ALL * &#x60;AMD&#x60; - AMD * &#x60;ANG&#x60; - ANG * &#x60;AOA&#x60; - AOA * &#x60;AOK&#x60; - AOK * &#x60;AON&#x60; - AON * &#x60;AOR&#x60; - AOR * &#x60;ARA&#x60; - ARA * &#x60;ARL&#x60; - ARL * &#x60;ARM&#x60; - ARM * &#x60;ARP&#x60; - ARP * &#x60;ARS&#x60; - ARS * &#x60;ATS&#x60; - ATS * &#x60;AUD&#x60; - AUD * &#x60;AWG&#x60; - AWG * &#x60;AZM&#x60; - AZM * &#x60;AZN&#x60; - AZN * &#x60;BAD&#x60; - BAD * &#x60;BAM&#x60; - BAM * &#x60;BAN&#x60; - BAN * &#x60;BBD&#x60; - BBD * &#x60;BDT&#x60; - BDT * &#x60;BEC&#x60; - BEC * &#x60;BEF&#x60; - BEF * &#x60;BEL&#x60; - BEL * &#x60;BGL&#x60; - BGL * &#x60;BGM&#x60; - BGM * &#x60;BGN&#x60; - BGN * &#x60;BGO&#x60; - BGO * &#x60;BHD&#x60; - BHD * &#x60;BIF&#x60; - BIF * &#x60;BMD&#x60; - BMD * &#x60;BND&#x60; - BND * &#x60;BOB&#x60; - BOB * &#x60;BOL&#x60; - BOL * &#x60;BOP&#x60; - BOP * &#x60;BOV&#x60; - BOV * &#x60;BRB&#x60; - BRB * &#x60;BRC&#x60; - BRC * &#x60;BRE&#x60; - BRE * &#x60;BRL&#x60; - BRL * &#x60;BRN&#x60; - BRN * &#x60;BRR&#x60; - BRR * &#x60;BRZ&#x60; - BRZ * &#x60;BSD&#x60; - BSD * &#x60;BTN&#x60; - BTN * &#x60;BUK&#x60; - BUK * &#x60;BWP&#x60; - BWP * &#x60;BYB&#x60; - BYB * &#x60;BYN&#x60; - BYN * &#x60;BYR&#x60; - BYR * &#x60;BZD&#x60; - BZD * &#x60;CAD&#x60; - CAD * &#x60;CDF&#x60; - CDF * &#x60;CHE&#x60; - CHE * &#x60;CHF&#x60; - CHF * &#x60;CHW&#x60; - CHW * &#x60;CLE&#x60; - CLE * &#x60;CLF&#x60; - CLF * &#x60;CLP&#x60; - CLP * &#x60;CNH&#x60; - CNH * &#x60;CNX&#x60; - CNX * &#x60;CNY&#x60; - CNY * &#x60;COP&#x60; - COP * &#x60;COU&#x60; - COU * &#x60;CRC&#x60; - CRC * &#x60;CSD&#x60; - CSD * &#x60;CSK&#x60; - CSK * &#x60;CUC&#x60; - CUC * &#x60;CUP&#x60; - CUP * &#x60;CVE&#x60; - CVE * &#x60;CYP&#x60; - CYP * &#x60;CZK&#x60; - CZK * &#x60;DDM&#x60; - DDM * &#x60;DEM&#x60; - DEM * &#x60;DJF&#x60; - DJF * &#x60;DKK&#x60; - DKK * &#x60;DOP&#x60; - DOP * &#x60;DZD&#x60; - DZD * &#x60;ECS&#x60; - ECS * &#x60;ECV&#x60; - ECV * &#x60;EEK&#x60; - EEK * &#x60;EGP&#x60; - EGP * &#x60;ERN&#x60; - ERN * &#x60;ESA&#x60; - ESA * &#x60;ESB&#x60; - ESB * &#x60;ESP&#x60; - ESP * &#x60;ETB&#x60; - ETB * &#x60;EUR&#x60; - EUR * &#x60;FIM&#x60; - FIM * &#x60;FJD&#x60; - FJD * &#x60;FKP&#x60; - FKP * &#x60;FRF&#x60; - FRF * &#x60;GBP&#x60; - GBP * &#x60;GEK&#x60; - GEK * &#x60;GEL&#x60; - GEL * &#x60;GHC&#x60; - GHC * &#x60;GHS&#x60; - GHS * &#x60;GIP&#x60; - GIP * &#x60;GMD&#x60; - GMD * &#x60;GNF&#x60; - GNF * &#x60;GNS&#x60; - GNS * &#x60;GQE&#x60; - GQE * &#x60;GRD&#x60; - GRD * &#x60;GTQ&#x60; - GTQ * &#x60;GWE&#x60; - GWE * &#x60;GWP&#x60; - GWP * &#x60;GYD&#x60; - GYD * &#x60;HKD&#x60; - HKD * &#x60;HNL&#x60; - HNL * &#x60;HRD&#x60; - HRD * &#x60;HRK&#x60; - HRK * &#x60;HTG&#x60; - HTG * &#x60;HUF&#x60; - HUF * &#x60;IDR&#x60; - IDR * &#x60;IEP&#x60; - IEP * &#x60;ILP&#x60; - ILP * &#x60;ILR&#x60; - ILR * &#x60;ILS&#x60; - ILS * &#x60;INR&#x60; - INR * &#x60;IQD&#x60; - IQD * &#x60;IRR&#x60; - IRR * &#x60;ISJ&#x60; - ISJ * &#x60;ISK&#x60; - ISK * &#x60;ITL&#x60; - ITL * &#x60;JMD&#x60; - JMD * &#x60;JOD&#x60; - JOD * &#x60;JPY&#x60; - JPY * &#x60;KES&#x60; - KES * &#x60;KGS&#x60; - KGS * &#x60;KHR&#x60; - KHR * &#x60;KMF&#x60; - KMF * &#x60;KPW&#x60; - KPW * &#x60;KRH&#x60; - KRH * &#x60;KRO&#x60; - KRO * &#x60;KRW&#x60; - KRW * &#x60;KWD&#x60; - KWD * &#x60;KYD&#x60; - KYD * &#x60;KZT&#x60; - KZT * &#x60;LAK&#x60; - LAK * &#x60;LBP&#x60; - LBP * &#x60;LKR&#x60; - LKR * &#x60;LRD&#x60; - LRD * &#x60;LSL&#x60; - LSL * &#x60;LTL&#x60; - LTL * &#x60;LTT&#x60; - LTT * &#x60;LUC&#x60; - LUC * &#x60;LUF&#x60; - LUF * &#x60;LUL&#x60; - LUL * &#x60;LVL&#x60; - LVL * &#x60;LVR&#x60; - LVR * &#x60;LYD&#x60; - LYD * &#x60;MAD&#x60; - MAD * &#x60;MAF&#x60; - MAF * &#x60;MCF&#x60; - MCF * &#x60;MDC&#x60; - MDC * &#x60;MDL&#x60; - MDL * &#x60;MGA&#x60; - MGA * &#x60;MGF&#x60; - MGF * &#x60;MKD&#x60; - MKD * &#x60;MKN&#x60; - MKN * &#x60;MLF&#x60; - MLF * &#x60;MMK&#x60; - MMK * &#x60;MNT&#x60; - MNT * &#x60;MOP&#x60; - MOP * &#x60;MRO&#x60; - MRO * &#x60;MRU&#x60; - MRU * &#x60;MTL&#x60; - MTL * &#x60;MTP&#x60; - MTP * &#x60;MUR&#x60; - MUR * &#x60;MVP&#x60; - MVP * &#x60;MVR&#x60; - MVR * &#x60;MWK&#x60; - MWK * &#x60;MXN&#x60; - MXN * &#x60;MXP&#x60; - MXP * &#x60;MXV&#x60; - MXV * &#x60;MYR&#x60; - MYR * &#x60;MZE&#x60; - MZE * &#x60;MZM&#x60; - MZM * &#x60;MZN&#x60; - MZN * &#x60;NAD&#x60; - NAD * &#x60;NGN&#x60; - NGN * &#x60;NIC&#x60; - NIC * &#x60;NIO&#x60; - NIO * &#x60;NLG&#x60; - NLG * &#x60;NOK&#x60; - NOK * &#x60;NPR&#x60; - NPR * &#x60;NZD&#x60; - NZD * &#x60;OMR&#x60; - OMR * &#x60;PAB&#x60; - PAB * &#x60;PEI&#x60; - PEI * &#x60;PEN&#x60; - PEN * &#x60;PES&#x60; - PES * &#x60;PGK&#x60; - PGK * &#x60;PHP&#x60; - PHP * &#x60;PKR&#x60; - PKR * &#x60;PLN&#x60; - PLN * &#x60;PLZ&#x60; - PLZ * &#x60;PTE&#x60; - PTE * &#x60;PYG&#x60; - PYG * &#x60;QAR&#x60; - QAR * &#x60;RHD&#x60; - RHD * &#x60;ROL&#x60; - ROL * &#x60;RON&#x60; - RON * &#x60;RSD&#x60; - RSD * &#x60;RUB&#x60; - RUB * &#x60;RUR&#x60; - RUR * &#x60;RWF&#x60; - RWF * &#x60;SAR&#x60; - SAR * &#x60;SBD&#x60; - SBD * &#x60;SCR&#x60; - SCR * &#x60;SDD&#x60; - SDD * &#x60;SDG&#x60; - SDG * &#x60;SDP&#x60; - SDP * &#x60;SEK&#x60; - SEK * &#x60;SGD&#x60; - SGD * &#x60;SHP&#x60; - SHP * &#x60;SIT&#x60; - SIT * &#x60;SKK&#x60; - SKK * &#x60;SLE&#x60; - SLE * &#x60;SLL&#x60; - SLL * &#x60;SOS&#x60; - SOS * &#x60;SRD&#x60; - SRD * &#x60;SRG&#x60; - SRG * &#x60;SSP&#x60; - SSP * &#x60;STD&#x60; - STD * &#x60;STN&#x60; - STN * &#x60;SUR&#x60; - SUR * &#x60;SVC&#x60; - SVC * &#x60;SYP&#x60; - SYP * &#x60;SZL&#x60; - SZL * &#x60;THB&#x60; - THB * &#x60;TJR&#x60; - TJR * &#x60;TJS&#x60; - TJS * &#x60;TMM&#x60; - TMM * &#x60;TMT&#x60; - TMT * &#x60;TND&#x60; - TND * &#x60;TOP&#x60; - TOP * &#x60;TPE&#x60; - TPE * &#x60;TRL&#x60; - TRL * &#x60;TRY&#x60; - TRY * &#x60;TTD&#x60; - TTD * &#x60;TWD&#x60; - TWD * &#x60;TZS&#x60; - TZS * &#x60;UAH&#x60; - UAH * &#x60;UAK&#x60; - UAK * &#x60;UGS&#x60; - UGS * &#x60;UGX&#x60; - UGX * &#x60;USD&#x60; - USD * &#x60;USN&#x60; - USN * &#x60;USS&#x60; - USS * &#x60;UYI&#x60; - UYI * &#x60;UYP&#x60; - UYP * &#x60;UYU&#x60; - UYU * &#x60;UYW&#x60; - UYW * &#x60;UZS&#x60; - UZS * &#x60;VEB&#x60; - VEB * &#x60;VED&#x60; - VED * &#x60;VEF&#x60; - VEF * &#x60;VES&#x60; - VES * &#x60;VND&#x60; - VND * &#x60;VNN&#x60; - VNN * &#x60;VUV&#x60; - VUV * &#x60;WST&#x60; - WST * &#x60;XAF&#x60; - XAF * &#x60;XAG&#x60; - XAG * &#x60;XAU&#x60; - XAU * &#x60;XBA&#x60; - XBA * &#x60;XBB&#x60; - XBB * &#x60;XBC&#x60; - XBC * &#x60;XBD&#x60; - XBD * &#x60;XCD&#x60; - XCD * &#x60;XDR&#x60; - XDR * &#x60;XEU&#x60; - XEU * &#x60;XFO&#x60; - XFO * &#x60;XFU&#x60; - XFU * &#x60;XOF&#x60; - XOF * &#x60;XPD&#x60; - XPD * &#x60;XPF&#x60; - XPF * &#x60;XPT&#x60; - XPT * &#x60;XRE&#x60; - XRE * &#x60;XSU&#x60; - XSU * &#x60;XTS&#x60; - XTS * &#x60;XUA&#x60; - XUA * &#x60;XXX&#x60; - XXX * &#x60;YDD&#x60; - YDD * &#x60;YER&#x60; - YER * &#x60;YUD&#x60; - YUD * &#x60;YUM&#x60; - YUM * &#x60;YUN&#x60; - YUN * &#x60;YUR&#x60; - YUR * &#x60;ZAL&#x60; - ZAL * &#x60;ZAR&#x60; - ZAR * &#x60;ZMK&#x60; - ZMK * &#x60;ZMW&#x60; - ZMW * &#x60;ZRN&#x60; - ZRN * &#x60;ZRZ&#x60; - ZRZ * &#x60;ZWD&#x60; - ZWD * &#x60;ZWL&#x60; - ZWL * &#x60;ZWR&#x60; - ZWR (optional)
     * @param date  (optional)
     * @param dateGt  (optional)
     * @param dateGte  (optional)
     * @param dateLt  (optional)
     * @param dateLte  (optional)
     * @param dateMonth  (optional)
     * @param dateYear  (optional)
     * @param labelsTagsContains  (optional)
     * @param locationId  (optional)
     * @param locationIdIsnull  (optional)
     * @param locationOsmId  (optional)
     * @param locationOsmType * &#x60;NODE&#x60; - NODE * &#x60;WAY&#x60; - WAY * &#x60;RELATION&#x60; - RELATION (optional)
     * @param orderBy Which field to use when ordering the results. (optional)
     * @param originsTagsContains  (optional)
     * @param owner  (optional)
     * @param price  (optional)
     * @param priceGt  (optional)
     * @param priceGte  (optional)
     * @param priceLt  (optional)
     * @param priceLte  (optional)
     * @param priceIsDiscounted  (optional)
     * @param productCode  (optional)
     * @param productId  (optional)
     * @param productIdIsnull  (optional)
     * @param proofId  (optional)
     * @param proofIdIsnull  (optional)
     * @return PriceStats
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun pricesStatsRetrieve(categoryTag: kotlin.String? = null, createdGte: java.time.OffsetDateTime? = null, createdLte: java.time.OffsetDateTime? = null, currency: CurrencyPricesStatsRetrieve? = null, date: java.time.LocalDate? = null, dateGt: java.time.LocalDate? = null, dateGte: java.time.LocalDate? = null, dateLt: java.time.LocalDate? = null, dateLte: java.time.LocalDate? = null, dateMonth: java.math.BigDecimal? = null, dateYear: java.math.BigDecimal? = null, labelsTagsContains: kotlin.String? = null, locationId: kotlin.Int? = null, locationIdIsnull: kotlin.Boolean? = null, locationOsmId: kotlin.Int? = null, locationOsmType: LocationOsmTypePricesStatsRetrieve? = null, orderBy: kotlin.String? = null, originsTagsContains: kotlin.String? = null, owner: kotlin.String? = null, price: java.math.BigDecimal? = null, priceGt: java.math.BigDecimal? = null, priceGte: java.math.BigDecimal? = null, priceLt: java.math.BigDecimal? = null, priceLte: java.math.BigDecimal? = null, priceIsDiscounted: kotlin.Boolean? = null, productCode: kotlin.String? = null, productId: kotlin.Int? = null, productIdIsnull: kotlin.Boolean? = null, proofId: kotlin.Int? = null, proofIdIsnull: kotlin.Boolean? = null) : PriceStats {
        val localVarResponse = pricesStatsRetrieveWithHttpInfo(categoryTag = categoryTag, createdGte = createdGte, createdLte = createdLte, currency = currency, date = date, dateGt = dateGt, dateGte = dateGte, dateLt = dateLt, dateLte = dateLte, dateMonth = dateMonth, dateYear = dateYear, labelsTagsContains = labelsTagsContains, locationId = locationId, locationIdIsnull = locationIdIsnull, locationOsmId = locationOsmId, locationOsmType = locationOsmType, orderBy = orderBy, originsTagsContains = originsTagsContains, owner = owner, price = price, priceGt = priceGt, priceGte = priceGte, priceLt = priceLt, priceLte = priceLte, priceIsDiscounted = priceIsDiscounted, productCode = productCode, productId = productId, productIdIsnull = productIdIsnull, proofId = proofId, proofIdIsnull = proofIdIsnull)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PriceStats
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param categoryTag  (optional)
     * @param createdGte  (optional)
     * @param createdLte  (optional)
     * @param currency * &#x60;ADP&#x60; - ADP * &#x60;AED&#x60; - AED * &#x60;AFA&#x60; - AFA * &#x60;AFN&#x60; - AFN * &#x60;ALK&#x60; - ALK * &#x60;ALL&#x60; - ALL * &#x60;AMD&#x60; - AMD * &#x60;ANG&#x60; - ANG * &#x60;AOA&#x60; - AOA * &#x60;AOK&#x60; - AOK * &#x60;AON&#x60; - AON * &#x60;AOR&#x60; - AOR * &#x60;ARA&#x60; - ARA * &#x60;ARL&#x60; - ARL * &#x60;ARM&#x60; - ARM * &#x60;ARP&#x60; - ARP * &#x60;ARS&#x60; - ARS * &#x60;ATS&#x60; - ATS * &#x60;AUD&#x60; - AUD * &#x60;AWG&#x60; - AWG * &#x60;AZM&#x60; - AZM * &#x60;AZN&#x60; - AZN * &#x60;BAD&#x60; - BAD * &#x60;BAM&#x60; - BAM * &#x60;BAN&#x60; - BAN * &#x60;BBD&#x60; - BBD * &#x60;BDT&#x60; - BDT * &#x60;BEC&#x60; - BEC * &#x60;BEF&#x60; - BEF * &#x60;BEL&#x60; - BEL * &#x60;BGL&#x60; - BGL * &#x60;BGM&#x60; - BGM * &#x60;BGN&#x60; - BGN * &#x60;BGO&#x60; - BGO * &#x60;BHD&#x60; - BHD * &#x60;BIF&#x60; - BIF * &#x60;BMD&#x60; - BMD * &#x60;BND&#x60; - BND * &#x60;BOB&#x60; - BOB * &#x60;BOL&#x60; - BOL * &#x60;BOP&#x60; - BOP * &#x60;BOV&#x60; - BOV * &#x60;BRB&#x60; - BRB * &#x60;BRC&#x60; - BRC * &#x60;BRE&#x60; - BRE * &#x60;BRL&#x60; - BRL * &#x60;BRN&#x60; - BRN * &#x60;BRR&#x60; - BRR * &#x60;BRZ&#x60; - BRZ * &#x60;BSD&#x60; - BSD * &#x60;BTN&#x60; - BTN * &#x60;BUK&#x60; - BUK * &#x60;BWP&#x60; - BWP * &#x60;BYB&#x60; - BYB * &#x60;BYN&#x60; - BYN * &#x60;BYR&#x60; - BYR * &#x60;BZD&#x60; - BZD * &#x60;CAD&#x60; - CAD * &#x60;CDF&#x60; - CDF * &#x60;CHE&#x60; - CHE * &#x60;CHF&#x60; - CHF * &#x60;CHW&#x60; - CHW * &#x60;CLE&#x60; - CLE * &#x60;CLF&#x60; - CLF * &#x60;CLP&#x60; - CLP * &#x60;CNH&#x60; - CNH * &#x60;CNX&#x60; - CNX * &#x60;CNY&#x60; - CNY * &#x60;COP&#x60; - COP * &#x60;COU&#x60; - COU * &#x60;CRC&#x60; - CRC * &#x60;CSD&#x60; - CSD * &#x60;CSK&#x60; - CSK * &#x60;CUC&#x60; - CUC * &#x60;CUP&#x60; - CUP * &#x60;CVE&#x60; - CVE * &#x60;CYP&#x60; - CYP * &#x60;CZK&#x60; - CZK * &#x60;DDM&#x60; - DDM * &#x60;DEM&#x60; - DEM * &#x60;DJF&#x60; - DJF * &#x60;DKK&#x60; - DKK * &#x60;DOP&#x60; - DOP * &#x60;DZD&#x60; - DZD * &#x60;ECS&#x60; - ECS * &#x60;ECV&#x60; - ECV * &#x60;EEK&#x60; - EEK * &#x60;EGP&#x60; - EGP * &#x60;ERN&#x60; - ERN * &#x60;ESA&#x60; - ESA * &#x60;ESB&#x60; - ESB * &#x60;ESP&#x60; - ESP * &#x60;ETB&#x60; - ETB * &#x60;EUR&#x60; - EUR * &#x60;FIM&#x60; - FIM * &#x60;FJD&#x60; - FJD * &#x60;FKP&#x60; - FKP * &#x60;FRF&#x60; - FRF * &#x60;GBP&#x60; - GBP * &#x60;GEK&#x60; - GEK * &#x60;GEL&#x60; - GEL * &#x60;GHC&#x60; - GHC * &#x60;GHS&#x60; - GHS * &#x60;GIP&#x60; - GIP * &#x60;GMD&#x60; - GMD * &#x60;GNF&#x60; - GNF * &#x60;GNS&#x60; - GNS * &#x60;GQE&#x60; - GQE * &#x60;GRD&#x60; - GRD * &#x60;GTQ&#x60; - GTQ * &#x60;GWE&#x60; - GWE * &#x60;GWP&#x60; - GWP * &#x60;GYD&#x60; - GYD * &#x60;HKD&#x60; - HKD * &#x60;HNL&#x60; - HNL * &#x60;HRD&#x60; - HRD * &#x60;HRK&#x60; - HRK * &#x60;HTG&#x60; - HTG * &#x60;HUF&#x60; - HUF * &#x60;IDR&#x60; - IDR * &#x60;IEP&#x60; - IEP * &#x60;ILP&#x60; - ILP * &#x60;ILR&#x60; - ILR * &#x60;ILS&#x60; - ILS * &#x60;INR&#x60; - INR * &#x60;IQD&#x60; - IQD * &#x60;IRR&#x60; - IRR * &#x60;ISJ&#x60; - ISJ * &#x60;ISK&#x60; - ISK * &#x60;ITL&#x60; - ITL * &#x60;JMD&#x60; - JMD * &#x60;JOD&#x60; - JOD * &#x60;JPY&#x60; - JPY * &#x60;KES&#x60; - KES * &#x60;KGS&#x60; - KGS * &#x60;KHR&#x60; - KHR * &#x60;KMF&#x60; - KMF * &#x60;KPW&#x60; - KPW * &#x60;KRH&#x60; - KRH * &#x60;KRO&#x60; - KRO * &#x60;KRW&#x60; - KRW * &#x60;KWD&#x60; - KWD * &#x60;KYD&#x60; - KYD * &#x60;KZT&#x60; - KZT * &#x60;LAK&#x60; - LAK * &#x60;LBP&#x60; - LBP * &#x60;LKR&#x60; - LKR * &#x60;LRD&#x60; - LRD * &#x60;LSL&#x60; - LSL * &#x60;LTL&#x60; - LTL * &#x60;LTT&#x60; - LTT * &#x60;LUC&#x60; - LUC * &#x60;LUF&#x60; - LUF * &#x60;LUL&#x60; - LUL * &#x60;LVL&#x60; - LVL * &#x60;LVR&#x60; - LVR * &#x60;LYD&#x60; - LYD * &#x60;MAD&#x60; - MAD * &#x60;MAF&#x60; - MAF * &#x60;MCF&#x60; - MCF * &#x60;MDC&#x60; - MDC * &#x60;MDL&#x60; - MDL * &#x60;MGA&#x60; - MGA * &#x60;MGF&#x60; - MGF * &#x60;MKD&#x60; - MKD * &#x60;MKN&#x60; - MKN * &#x60;MLF&#x60; - MLF * &#x60;MMK&#x60; - MMK * &#x60;MNT&#x60; - MNT * &#x60;MOP&#x60; - MOP * &#x60;MRO&#x60; - MRO * &#x60;MRU&#x60; - MRU * &#x60;MTL&#x60; - MTL * &#x60;MTP&#x60; - MTP * &#x60;MUR&#x60; - MUR * &#x60;MVP&#x60; - MVP * &#x60;MVR&#x60; - MVR * &#x60;MWK&#x60; - MWK * &#x60;MXN&#x60; - MXN * &#x60;MXP&#x60; - MXP * &#x60;MXV&#x60; - MXV * &#x60;MYR&#x60; - MYR * &#x60;MZE&#x60; - MZE * &#x60;MZM&#x60; - MZM * &#x60;MZN&#x60; - MZN * &#x60;NAD&#x60; - NAD * &#x60;NGN&#x60; - NGN * &#x60;NIC&#x60; - NIC * &#x60;NIO&#x60; - NIO * &#x60;NLG&#x60; - NLG * &#x60;NOK&#x60; - NOK * &#x60;NPR&#x60; - NPR * &#x60;NZD&#x60; - NZD * &#x60;OMR&#x60; - OMR * &#x60;PAB&#x60; - PAB * &#x60;PEI&#x60; - PEI * &#x60;PEN&#x60; - PEN * &#x60;PES&#x60; - PES * &#x60;PGK&#x60; - PGK * &#x60;PHP&#x60; - PHP * &#x60;PKR&#x60; - PKR * &#x60;PLN&#x60; - PLN * &#x60;PLZ&#x60; - PLZ * &#x60;PTE&#x60; - PTE * &#x60;PYG&#x60; - PYG * &#x60;QAR&#x60; - QAR * &#x60;RHD&#x60; - RHD * &#x60;ROL&#x60; - ROL * &#x60;RON&#x60; - RON * &#x60;RSD&#x60; - RSD * &#x60;RUB&#x60; - RUB * &#x60;RUR&#x60; - RUR * &#x60;RWF&#x60; - RWF * &#x60;SAR&#x60; - SAR * &#x60;SBD&#x60; - SBD * &#x60;SCR&#x60; - SCR * &#x60;SDD&#x60; - SDD * &#x60;SDG&#x60; - SDG * &#x60;SDP&#x60; - SDP * &#x60;SEK&#x60; - SEK * &#x60;SGD&#x60; - SGD * &#x60;SHP&#x60; - SHP * &#x60;SIT&#x60; - SIT * &#x60;SKK&#x60; - SKK * &#x60;SLE&#x60; - SLE * &#x60;SLL&#x60; - SLL * &#x60;SOS&#x60; - SOS * &#x60;SRD&#x60; - SRD * &#x60;SRG&#x60; - SRG * &#x60;SSP&#x60; - SSP * &#x60;STD&#x60; - STD * &#x60;STN&#x60; - STN * &#x60;SUR&#x60; - SUR * &#x60;SVC&#x60; - SVC * &#x60;SYP&#x60; - SYP * &#x60;SZL&#x60; - SZL * &#x60;THB&#x60; - THB * &#x60;TJR&#x60; - TJR * &#x60;TJS&#x60; - TJS * &#x60;TMM&#x60; - TMM * &#x60;TMT&#x60; - TMT * &#x60;TND&#x60; - TND * &#x60;TOP&#x60; - TOP * &#x60;TPE&#x60; - TPE * &#x60;TRL&#x60; - TRL * &#x60;TRY&#x60; - TRY * &#x60;TTD&#x60; - TTD * &#x60;TWD&#x60; - TWD * &#x60;TZS&#x60; - TZS * &#x60;UAH&#x60; - UAH * &#x60;UAK&#x60; - UAK * &#x60;UGS&#x60; - UGS * &#x60;UGX&#x60; - UGX * &#x60;USD&#x60; - USD * &#x60;USN&#x60; - USN * &#x60;USS&#x60; - USS * &#x60;UYI&#x60; - UYI * &#x60;UYP&#x60; - UYP * &#x60;UYU&#x60; - UYU * &#x60;UYW&#x60; - UYW * &#x60;UZS&#x60; - UZS * &#x60;VEB&#x60; - VEB * &#x60;VED&#x60; - VED * &#x60;VEF&#x60; - VEF * &#x60;VES&#x60; - VES * &#x60;VND&#x60; - VND * &#x60;VNN&#x60; - VNN * &#x60;VUV&#x60; - VUV * &#x60;WST&#x60; - WST * &#x60;XAF&#x60; - XAF * &#x60;XAG&#x60; - XAG * &#x60;XAU&#x60; - XAU * &#x60;XBA&#x60; - XBA * &#x60;XBB&#x60; - XBB * &#x60;XBC&#x60; - XBC * &#x60;XBD&#x60; - XBD * &#x60;XCD&#x60; - XCD * &#x60;XDR&#x60; - XDR * &#x60;XEU&#x60; - XEU * &#x60;XFO&#x60; - XFO * &#x60;XFU&#x60; - XFU * &#x60;XOF&#x60; - XOF * &#x60;XPD&#x60; - XPD * &#x60;XPF&#x60; - XPF * &#x60;XPT&#x60; - XPT * &#x60;XRE&#x60; - XRE * &#x60;XSU&#x60; - XSU * &#x60;XTS&#x60; - XTS * &#x60;XUA&#x60; - XUA * &#x60;XXX&#x60; - XXX * &#x60;YDD&#x60; - YDD * &#x60;YER&#x60; - YER * &#x60;YUD&#x60; - YUD * &#x60;YUM&#x60; - YUM * &#x60;YUN&#x60; - YUN * &#x60;YUR&#x60; - YUR * &#x60;ZAL&#x60; - ZAL * &#x60;ZAR&#x60; - ZAR * &#x60;ZMK&#x60; - ZMK * &#x60;ZMW&#x60; - ZMW * &#x60;ZRN&#x60; - ZRN * &#x60;ZRZ&#x60; - ZRZ * &#x60;ZWD&#x60; - ZWD * &#x60;ZWL&#x60; - ZWL * &#x60;ZWR&#x60; - ZWR (optional)
     * @param date  (optional)
     * @param dateGt  (optional)
     * @param dateGte  (optional)
     * @param dateLt  (optional)
     * @param dateLte  (optional)
     * @param dateMonth  (optional)
     * @param dateYear  (optional)
     * @param labelsTagsContains  (optional)
     * @param locationId  (optional)
     * @param locationIdIsnull  (optional)
     * @param locationOsmId  (optional)
     * @param locationOsmType * &#x60;NODE&#x60; - NODE * &#x60;WAY&#x60; - WAY * &#x60;RELATION&#x60; - RELATION (optional)
     * @param orderBy Which field to use when ordering the results. (optional)
     * @param originsTagsContains  (optional)
     * @param owner  (optional)
     * @param price  (optional)
     * @param priceGt  (optional)
     * @param priceGte  (optional)
     * @param priceLt  (optional)
     * @param priceLte  (optional)
     * @param priceIsDiscounted  (optional)
     * @param productCode  (optional)
     * @param productId  (optional)
     * @param productIdIsnull  (optional)
     * @param proofId  (optional)
     * @param proofIdIsnull  (optional)
     * @return ApiResponse<PriceStats?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun pricesStatsRetrieveWithHttpInfo(categoryTag: kotlin.String?, createdGte: java.time.OffsetDateTime?, createdLte: java.time.OffsetDateTime?, currency: CurrencyPricesStatsRetrieve?, date: java.time.LocalDate?, dateGt: java.time.LocalDate?, dateGte: java.time.LocalDate?, dateLt: java.time.LocalDate?, dateLte: java.time.LocalDate?, dateMonth: java.math.BigDecimal?, dateYear: java.math.BigDecimal?, labelsTagsContains: kotlin.String?, locationId: kotlin.Int?, locationIdIsnull: kotlin.Boolean?, locationOsmId: kotlin.Int?, locationOsmType: LocationOsmTypePricesStatsRetrieve?, orderBy: kotlin.String?, originsTagsContains: kotlin.String?, owner: kotlin.String?, price: java.math.BigDecimal?, priceGt: java.math.BigDecimal?, priceGte: java.math.BigDecimal?, priceLt: java.math.BigDecimal?, priceLte: java.math.BigDecimal?, priceIsDiscounted: kotlin.Boolean?, productCode: kotlin.String?, productId: kotlin.Int?, productIdIsnull: kotlin.Boolean?, proofId: kotlin.Int?, proofIdIsnull: kotlin.Boolean?) : ApiResponse<PriceStats?> {
        val localVariableConfig = pricesStatsRetrieveRequestConfig(categoryTag = categoryTag, createdGte = createdGte, createdLte = createdLte, currency = currency, date = date, dateGt = dateGt, dateGte = dateGte, dateLt = dateLt, dateLte = dateLte, dateMonth = dateMonth, dateYear = dateYear, labelsTagsContains = labelsTagsContains, locationId = locationId, locationIdIsnull = locationIdIsnull, locationOsmId = locationOsmId, locationOsmType = locationOsmType, orderBy = orderBy, originsTagsContains = originsTagsContains, owner = owner, price = price, priceGt = priceGt, priceGte = priceGte, priceLt = priceLt, priceLte = priceLte, priceIsDiscounted = priceIsDiscounted, productCode = productCode, productId = productId, productIdIsnull = productIdIsnull, proofId = proofId, proofIdIsnull = proofIdIsnull)

        return request<Unit, PriceStats>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation pricesStatsRetrieve
     *
     * @param categoryTag  (optional)
     * @param createdGte  (optional)
     * @param createdLte  (optional)
     * @param currency * &#x60;ADP&#x60; - ADP * &#x60;AED&#x60; - AED * &#x60;AFA&#x60; - AFA * &#x60;AFN&#x60; - AFN * &#x60;ALK&#x60; - ALK * &#x60;ALL&#x60; - ALL * &#x60;AMD&#x60; - AMD * &#x60;ANG&#x60; - ANG * &#x60;AOA&#x60; - AOA * &#x60;AOK&#x60; - AOK * &#x60;AON&#x60; - AON * &#x60;AOR&#x60; - AOR * &#x60;ARA&#x60; - ARA * &#x60;ARL&#x60; - ARL * &#x60;ARM&#x60; - ARM * &#x60;ARP&#x60; - ARP * &#x60;ARS&#x60; - ARS * &#x60;ATS&#x60; - ATS * &#x60;AUD&#x60; - AUD * &#x60;AWG&#x60; - AWG * &#x60;AZM&#x60; - AZM * &#x60;AZN&#x60; - AZN * &#x60;BAD&#x60; - BAD * &#x60;BAM&#x60; - BAM * &#x60;BAN&#x60; - BAN * &#x60;BBD&#x60; - BBD * &#x60;BDT&#x60; - BDT * &#x60;BEC&#x60; - BEC * &#x60;BEF&#x60; - BEF * &#x60;BEL&#x60; - BEL * &#x60;BGL&#x60; - BGL * &#x60;BGM&#x60; - BGM * &#x60;BGN&#x60; - BGN * &#x60;BGO&#x60; - BGO * &#x60;BHD&#x60; - BHD * &#x60;BIF&#x60; - BIF * &#x60;BMD&#x60; - BMD * &#x60;BND&#x60; - BND * &#x60;BOB&#x60; - BOB * &#x60;BOL&#x60; - BOL * &#x60;BOP&#x60; - BOP * &#x60;BOV&#x60; - BOV * &#x60;BRB&#x60; - BRB * &#x60;BRC&#x60; - BRC * &#x60;BRE&#x60; - BRE * &#x60;BRL&#x60; - BRL * &#x60;BRN&#x60; - BRN * &#x60;BRR&#x60; - BRR * &#x60;BRZ&#x60; - BRZ * &#x60;BSD&#x60; - BSD * &#x60;BTN&#x60; - BTN * &#x60;BUK&#x60; - BUK * &#x60;BWP&#x60; - BWP * &#x60;BYB&#x60; - BYB * &#x60;BYN&#x60; - BYN * &#x60;BYR&#x60; - BYR * &#x60;BZD&#x60; - BZD * &#x60;CAD&#x60; - CAD * &#x60;CDF&#x60; - CDF * &#x60;CHE&#x60; - CHE * &#x60;CHF&#x60; - CHF * &#x60;CHW&#x60; - CHW * &#x60;CLE&#x60; - CLE * &#x60;CLF&#x60; - CLF * &#x60;CLP&#x60; - CLP * &#x60;CNH&#x60; - CNH * &#x60;CNX&#x60; - CNX * &#x60;CNY&#x60; - CNY * &#x60;COP&#x60; - COP * &#x60;COU&#x60; - COU * &#x60;CRC&#x60; - CRC * &#x60;CSD&#x60; - CSD * &#x60;CSK&#x60; - CSK * &#x60;CUC&#x60; - CUC * &#x60;CUP&#x60; - CUP * &#x60;CVE&#x60; - CVE * &#x60;CYP&#x60; - CYP * &#x60;CZK&#x60; - CZK * &#x60;DDM&#x60; - DDM * &#x60;DEM&#x60; - DEM * &#x60;DJF&#x60; - DJF * &#x60;DKK&#x60; - DKK * &#x60;DOP&#x60; - DOP * &#x60;DZD&#x60; - DZD * &#x60;ECS&#x60; - ECS * &#x60;ECV&#x60; - ECV * &#x60;EEK&#x60; - EEK * &#x60;EGP&#x60; - EGP * &#x60;ERN&#x60; - ERN * &#x60;ESA&#x60; - ESA * &#x60;ESB&#x60; - ESB * &#x60;ESP&#x60; - ESP * &#x60;ETB&#x60; - ETB * &#x60;EUR&#x60; - EUR * &#x60;FIM&#x60; - FIM * &#x60;FJD&#x60; - FJD * &#x60;FKP&#x60; - FKP * &#x60;FRF&#x60; - FRF * &#x60;GBP&#x60; - GBP * &#x60;GEK&#x60; - GEK * &#x60;GEL&#x60; - GEL * &#x60;GHC&#x60; - GHC * &#x60;GHS&#x60; - GHS * &#x60;GIP&#x60; - GIP * &#x60;GMD&#x60; - GMD * &#x60;GNF&#x60; - GNF * &#x60;GNS&#x60; - GNS * &#x60;GQE&#x60; - GQE * &#x60;GRD&#x60; - GRD * &#x60;GTQ&#x60; - GTQ * &#x60;GWE&#x60; - GWE * &#x60;GWP&#x60; - GWP * &#x60;GYD&#x60; - GYD * &#x60;HKD&#x60; - HKD * &#x60;HNL&#x60; - HNL * &#x60;HRD&#x60; - HRD * &#x60;HRK&#x60; - HRK * &#x60;HTG&#x60; - HTG * &#x60;HUF&#x60; - HUF * &#x60;IDR&#x60; - IDR * &#x60;IEP&#x60; - IEP * &#x60;ILP&#x60; - ILP * &#x60;ILR&#x60; - ILR * &#x60;ILS&#x60; - ILS * &#x60;INR&#x60; - INR * &#x60;IQD&#x60; - IQD * &#x60;IRR&#x60; - IRR * &#x60;ISJ&#x60; - ISJ * &#x60;ISK&#x60; - ISK * &#x60;ITL&#x60; - ITL * &#x60;JMD&#x60; - JMD * &#x60;JOD&#x60; - JOD * &#x60;JPY&#x60; - JPY * &#x60;KES&#x60; - KES * &#x60;KGS&#x60; - KGS * &#x60;KHR&#x60; - KHR * &#x60;KMF&#x60; - KMF * &#x60;KPW&#x60; - KPW * &#x60;KRH&#x60; - KRH * &#x60;KRO&#x60; - KRO * &#x60;KRW&#x60; - KRW * &#x60;KWD&#x60; - KWD * &#x60;KYD&#x60; - KYD * &#x60;KZT&#x60; - KZT * &#x60;LAK&#x60; - LAK * &#x60;LBP&#x60; - LBP * &#x60;LKR&#x60; - LKR * &#x60;LRD&#x60; - LRD * &#x60;LSL&#x60; - LSL * &#x60;LTL&#x60; - LTL * &#x60;LTT&#x60; - LTT * &#x60;LUC&#x60; - LUC * &#x60;LUF&#x60; - LUF * &#x60;LUL&#x60; - LUL * &#x60;LVL&#x60; - LVL * &#x60;LVR&#x60; - LVR * &#x60;LYD&#x60; - LYD * &#x60;MAD&#x60; - MAD * &#x60;MAF&#x60; - MAF * &#x60;MCF&#x60; - MCF * &#x60;MDC&#x60; - MDC * &#x60;MDL&#x60; - MDL * &#x60;MGA&#x60; - MGA * &#x60;MGF&#x60; - MGF * &#x60;MKD&#x60; - MKD * &#x60;MKN&#x60; - MKN * &#x60;MLF&#x60; - MLF * &#x60;MMK&#x60; - MMK * &#x60;MNT&#x60; - MNT * &#x60;MOP&#x60; - MOP * &#x60;MRO&#x60; - MRO * &#x60;MRU&#x60; - MRU * &#x60;MTL&#x60; - MTL * &#x60;MTP&#x60; - MTP * &#x60;MUR&#x60; - MUR * &#x60;MVP&#x60; - MVP * &#x60;MVR&#x60; - MVR * &#x60;MWK&#x60; - MWK * &#x60;MXN&#x60; - MXN * &#x60;MXP&#x60; - MXP * &#x60;MXV&#x60; - MXV * &#x60;MYR&#x60; - MYR * &#x60;MZE&#x60; - MZE * &#x60;MZM&#x60; - MZM * &#x60;MZN&#x60; - MZN * &#x60;NAD&#x60; - NAD * &#x60;NGN&#x60; - NGN * &#x60;NIC&#x60; - NIC * &#x60;NIO&#x60; - NIO * &#x60;NLG&#x60; - NLG * &#x60;NOK&#x60; - NOK * &#x60;NPR&#x60; - NPR * &#x60;NZD&#x60; - NZD * &#x60;OMR&#x60; - OMR * &#x60;PAB&#x60; - PAB * &#x60;PEI&#x60; - PEI * &#x60;PEN&#x60; - PEN * &#x60;PES&#x60; - PES * &#x60;PGK&#x60; - PGK * &#x60;PHP&#x60; - PHP * &#x60;PKR&#x60; - PKR * &#x60;PLN&#x60; - PLN * &#x60;PLZ&#x60; - PLZ * &#x60;PTE&#x60; - PTE * &#x60;PYG&#x60; - PYG * &#x60;QAR&#x60; - QAR * &#x60;RHD&#x60; - RHD * &#x60;ROL&#x60; - ROL * &#x60;RON&#x60; - RON * &#x60;RSD&#x60; - RSD * &#x60;RUB&#x60; - RUB * &#x60;RUR&#x60; - RUR * &#x60;RWF&#x60; - RWF * &#x60;SAR&#x60; - SAR * &#x60;SBD&#x60; - SBD * &#x60;SCR&#x60; - SCR * &#x60;SDD&#x60; - SDD * &#x60;SDG&#x60; - SDG * &#x60;SDP&#x60; - SDP * &#x60;SEK&#x60; - SEK * &#x60;SGD&#x60; - SGD * &#x60;SHP&#x60; - SHP * &#x60;SIT&#x60; - SIT * &#x60;SKK&#x60; - SKK * &#x60;SLE&#x60; - SLE * &#x60;SLL&#x60; - SLL * &#x60;SOS&#x60; - SOS * &#x60;SRD&#x60; - SRD * &#x60;SRG&#x60; - SRG * &#x60;SSP&#x60; - SSP * &#x60;STD&#x60; - STD * &#x60;STN&#x60; - STN * &#x60;SUR&#x60; - SUR * &#x60;SVC&#x60; - SVC * &#x60;SYP&#x60; - SYP * &#x60;SZL&#x60; - SZL * &#x60;THB&#x60; - THB * &#x60;TJR&#x60; - TJR * &#x60;TJS&#x60; - TJS * &#x60;TMM&#x60; - TMM * &#x60;TMT&#x60; - TMT * &#x60;TND&#x60; - TND * &#x60;TOP&#x60; - TOP * &#x60;TPE&#x60; - TPE * &#x60;TRL&#x60; - TRL * &#x60;TRY&#x60; - TRY * &#x60;TTD&#x60; - TTD * &#x60;TWD&#x60; - TWD * &#x60;TZS&#x60; - TZS * &#x60;UAH&#x60; - UAH * &#x60;UAK&#x60; - UAK * &#x60;UGS&#x60; - UGS * &#x60;UGX&#x60; - UGX * &#x60;USD&#x60; - USD * &#x60;USN&#x60; - USN * &#x60;USS&#x60; - USS * &#x60;UYI&#x60; - UYI * &#x60;UYP&#x60; - UYP * &#x60;UYU&#x60; - UYU * &#x60;UYW&#x60; - UYW * &#x60;UZS&#x60; - UZS * &#x60;VEB&#x60; - VEB * &#x60;VED&#x60; - VED * &#x60;VEF&#x60; - VEF * &#x60;VES&#x60; - VES * &#x60;VND&#x60; - VND * &#x60;VNN&#x60; - VNN * &#x60;VUV&#x60; - VUV * &#x60;WST&#x60; - WST * &#x60;XAF&#x60; - XAF * &#x60;XAG&#x60; - XAG * &#x60;XAU&#x60; - XAU * &#x60;XBA&#x60; - XBA * &#x60;XBB&#x60; - XBB * &#x60;XBC&#x60; - XBC * &#x60;XBD&#x60; - XBD * &#x60;XCD&#x60; - XCD * &#x60;XDR&#x60; - XDR * &#x60;XEU&#x60; - XEU * &#x60;XFO&#x60; - XFO * &#x60;XFU&#x60; - XFU * &#x60;XOF&#x60; - XOF * &#x60;XPD&#x60; - XPD * &#x60;XPF&#x60; - XPF * &#x60;XPT&#x60; - XPT * &#x60;XRE&#x60; - XRE * &#x60;XSU&#x60; - XSU * &#x60;XTS&#x60; - XTS * &#x60;XUA&#x60; - XUA * &#x60;XXX&#x60; - XXX * &#x60;YDD&#x60; - YDD * &#x60;YER&#x60; - YER * &#x60;YUD&#x60; - YUD * &#x60;YUM&#x60; - YUM * &#x60;YUN&#x60; - YUN * &#x60;YUR&#x60; - YUR * &#x60;ZAL&#x60; - ZAL * &#x60;ZAR&#x60; - ZAR * &#x60;ZMK&#x60; - ZMK * &#x60;ZMW&#x60; - ZMW * &#x60;ZRN&#x60; - ZRN * &#x60;ZRZ&#x60; - ZRZ * &#x60;ZWD&#x60; - ZWD * &#x60;ZWL&#x60; - ZWL * &#x60;ZWR&#x60; - ZWR (optional)
     * @param date  (optional)
     * @param dateGt  (optional)
     * @param dateGte  (optional)
     * @param dateLt  (optional)
     * @param dateLte  (optional)
     * @param dateMonth  (optional)
     * @param dateYear  (optional)
     * @param labelsTagsContains  (optional)
     * @param locationId  (optional)
     * @param locationIdIsnull  (optional)
     * @param locationOsmId  (optional)
     * @param locationOsmType * &#x60;NODE&#x60; - NODE * &#x60;WAY&#x60; - WAY * &#x60;RELATION&#x60; - RELATION (optional)
     * @param orderBy Which field to use when ordering the results. (optional)
     * @param originsTagsContains  (optional)
     * @param owner  (optional)
     * @param price  (optional)
     * @param priceGt  (optional)
     * @param priceGte  (optional)
     * @param priceLt  (optional)
     * @param priceLte  (optional)
     * @param priceIsDiscounted  (optional)
     * @param productCode  (optional)
     * @param productId  (optional)
     * @param productIdIsnull  (optional)
     * @param proofId  (optional)
     * @param proofIdIsnull  (optional)
     * @return RequestConfig
     */
    fun pricesStatsRetrieveRequestConfig(categoryTag: kotlin.String?, createdGte: java.time.OffsetDateTime?, createdLte: java.time.OffsetDateTime?, currency: CurrencyPricesStatsRetrieve?, date: java.time.LocalDate?, dateGt: java.time.LocalDate?, dateGte: java.time.LocalDate?, dateLt: java.time.LocalDate?, dateLte: java.time.LocalDate?, dateMonth: java.math.BigDecimal?, dateYear: java.math.BigDecimal?, labelsTagsContains: kotlin.String?, locationId: kotlin.Int?, locationIdIsnull: kotlin.Boolean?, locationOsmId: kotlin.Int?, locationOsmType: LocationOsmTypePricesStatsRetrieve?, orderBy: kotlin.String?, originsTagsContains: kotlin.String?, owner: kotlin.String?, price: java.math.BigDecimal?, priceGt: java.math.BigDecimal?, priceGte: java.math.BigDecimal?, priceLt: java.math.BigDecimal?, priceLte: java.math.BigDecimal?, priceIsDiscounted: kotlin.Boolean?, productCode: kotlin.String?, productId: kotlin.Int?, productIdIsnull: kotlin.Boolean?, proofId: kotlin.Int?, proofIdIsnull: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (categoryTag != null) {
                    put("category_tag", listOf(categoryTag.toString()))
                }
                if (createdGte != null) {
                    put("created__gte", listOf(parseDateToQueryString(createdGte)))
                }
                if (createdLte != null) {
                    put("created__lte", listOf(parseDateToQueryString(createdLte)))
                }
                if (currency != null) {
                    put("currency", listOf(currency.value))
                }
                if (date != null) {
                    put("date", listOf(parseDateToQueryString(date)))
                }
                if (dateGt != null) {
                    put("date__gt", listOf(parseDateToQueryString(dateGt)))
                }
                if (dateGte != null) {
                    put("date__gte", listOf(parseDateToQueryString(dateGte)))
                }
                if (dateLt != null) {
                    put("date__lt", listOf(parseDateToQueryString(dateLt)))
                }
                if (dateLte != null) {
                    put("date__lte", listOf(parseDateToQueryString(dateLte)))
                }
                if (dateMonth != null) {
                    put("date__month", listOf(dateMonth.toString()))
                }
                if (dateYear != null) {
                    put("date__year", listOf(dateYear.toString()))
                }
                if (labelsTagsContains != null) {
                    put("labels_tags__contains", listOf(labelsTagsContains.toString()))
                }
                if (locationId != null) {
                    put("location_id", listOf(locationId.toString()))
                }
                if (locationIdIsnull != null) {
                    put("location_id__isnull", listOf(locationIdIsnull.toString()))
                }
                if (locationOsmId != null) {
                    put("location_osm_id", listOf(locationOsmId.toString()))
                }
                if (locationOsmType != null) {
                    put("location_osm_type", listOf(locationOsmType.value))
                }
                if (orderBy != null) {
                    put("order_by", listOf(orderBy.toString()))
                }
                if (originsTagsContains != null) {
                    put("origins_tags__contains", listOf(originsTagsContains.toString()))
                }
                if (owner != null) {
                    put("owner", listOf(owner.toString()))
                }
                if (price != null) {
                    put("price", listOf(price.toString()))
                }
                if (priceGt != null) {
                    put("price__gt", listOf(priceGt.toString()))
                }
                if (priceGte != null) {
                    put("price__gte", listOf(priceGte.toString()))
                }
                if (priceLt != null) {
                    put("price__lt", listOf(priceLt.toString()))
                }
                if (priceLte != null) {
                    put("price__lte", listOf(priceLte.toString()))
                }
                if (priceIsDiscounted != null) {
                    put("price_is_discounted", listOf(priceIsDiscounted.toString()))
                }
                if (productCode != null) {
                    put("product_code", listOf(productCode.toString()))
                }
                if (productId != null) {
                    put("product_id", listOf(productId.toString()))
                }
                if (productIdIsnull != null) {
                    put("product_id__isnull", listOf(productIdIsnull.toString()))
                }
                if (proofId != null) {
                    put("proof_id", listOf(proofId.toString()))
                }
                if (proofIdIsnull != null) {
                    put("proof_id__isnull", listOf(proofIdIsnull.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/prices/stats",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
