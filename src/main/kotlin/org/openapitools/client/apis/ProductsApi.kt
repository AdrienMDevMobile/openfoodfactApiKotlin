/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import org.openapitools.client.models.PaginatedProductFullList
import org.openapitools.client.models.ProductFull

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class ProductsApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
     * 
     * 
     * @param code 
     * @return ProductFull
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun productsCodeRetrieve(code: kotlin.String) : ProductFull {
        val localVarResponse = productsCodeRetrieveWithHttpInfo(code = code)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ProductFull
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param code 
     * @return ApiResponse<ProductFull?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun productsCodeRetrieveWithHttpInfo(code: kotlin.String) : ApiResponse<ProductFull?> {
        val localVariableConfig = productsCodeRetrieveRequestConfig(code = code)

        return request<Unit, ProductFull>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation productsCodeRetrieve
     *
     * @param code 
     * @return RequestConfig
     */
    fun productsCodeRetrieveRequestConfig(code: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/products/code/{code}".replace("{"+"code"+"}", encodeURIComponent(code.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter source
     */
     enum class SourceProductsList(val value: kotlin.String) {
         @Json(name = "obf") obf("obf"),
         @Json(name = "off") off("off"),
         @Json(name = "off_pro") off_pro("off_pro"),
         @Json(name = "opf") opf("opf"),
         @Json(name = "opff") opff("opff")
     }

    /**
     * 
     * 
     * @param brandsLike  (optional)
     * @param brandsTagsContains  (optional)
     * @param categoriesTagsContains  (optional)
     * @param code  (optional)
     * @param ecoscoreGrade  (optional)
     * @param labelsTagsContains  (optional)
     * @param novaGroup  (optional)
     * @param nutriscoreGrade  (optional)
     * @param orderBy Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param priceCount  (optional)
     * @param priceCountGte  (optional)
     * @param priceCountLte  (optional)
     * @param productNameLike  (optional)
     * @param size Number of results to return per page. (optional)
     * @param source * &#x60;off&#x60; - off * &#x60;obf&#x60; - obf * &#x60;opff&#x60; - opff * &#x60;opf&#x60; - opf * &#x60;off_pro&#x60; - off_pro (optional)
     * @param uniqueScansNGte  (optional)
     * @return PaginatedProductFullList
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun productsList(brandsLike: kotlin.String? = null, brandsTagsContains: kotlin.String? = null, categoriesTagsContains: kotlin.String? = null, code: kotlin.String? = null, ecoscoreGrade: kotlin.String? = null, labelsTagsContains: kotlin.String? = null, novaGroup: kotlin.Int? = null, nutriscoreGrade: kotlin.String? = null, orderBy: kotlin.String? = null, page: kotlin.Int? = null, priceCount: kotlin.Int? = null, priceCountGte: kotlin.Int? = null, priceCountLte: kotlin.Int? = null, productNameLike: kotlin.String? = null, size: kotlin.Int? = null, source: SourceProductsList? = null, uniqueScansNGte: kotlin.Int? = null) : PaginatedProductFullList {
        val localVarResponse = productsListWithHttpInfo(brandsLike = brandsLike, brandsTagsContains = brandsTagsContains, categoriesTagsContains = categoriesTagsContains, code = code, ecoscoreGrade = ecoscoreGrade, labelsTagsContains = labelsTagsContains, novaGroup = novaGroup, nutriscoreGrade = nutriscoreGrade, orderBy = orderBy, page = page, priceCount = priceCount, priceCountGte = priceCountGte, priceCountLte = priceCountLte, productNameLike = productNameLike, size = size, source = source, uniqueScansNGte = uniqueScansNGte)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PaginatedProductFullList
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param brandsLike  (optional)
     * @param brandsTagsContains  (optional)
     * @param categoriesTagsContains  (optional)
     * @param code  (optional)
     * @param ecoscoreGrade  (optional)
     * @param labelsTagsContains  (optional)
     * @param novaGroup  (optional)
     * @param nutriscoreGrade  (optional)
     * @param orderBy Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param priceCount  (optional)
     * @param priceCountGte  (optional)
     * @param priceCountLte  (optional)
     * @param productNameLike  (optional)
     * @param size Number of results to return per page. (optional)
     * @param source * &#x60;off&#x60; - off * &#x60;obf&#x60; - obf * &#x60;opff&#x60; - opff * &#x60;opf&#x60; - opf * &#x60;off_pro&#x60; - off_pro (optional)
     * @param uniqueScansNGte  (optional)
     * @return ApiResponse<PaginatedProductFullList?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun productsListWithHttpInfo(brandsLike: kotlin.String?, brandsTagsContains: kotlin.String?, categoriesTagsContains: kotlin.String?, code: kotlin.String?, ecoscoreGrade: kotlin.String?, labelsTagsContains: kotlin.String?, novaGroup: kotlin.Int?, nutriscoreGrade: kotlin.String?, orderBy: kotlin.String?, page: kotlin.Int?, priceCount: kotlin.Int?, priceCountGte: kotlin.Int?, priceCountLte: kotlin.Int?, productNameLike: kotlin.String?, size: kotlin.Int?, source: SourceProductsList?, uniqueScansNGte: kotlin.Int?) : ApiResponse<PaginatedProductFullList?> {
        val localVariableConfig = productsListRequestConfig(brandsLike = brandsLike, brandsTagsContains = brandsTagsContains, categoriesTagsContains = categoriesTagsContains, code = code, ecoscoreGrade = ecoscoreGrade, labelsTagsContains = labelsTagsContains, novaGroup = novaGroup, nutriscoreGrade = nutriscoreGrade, orderBy = orderBy, page = page, priceCount = priceCount, priceCountGte = priceCountGte, priceCountLte = priceCountLte, productNameLike = productNameLike, size = size, source = source, uniqueScansNGte = uniqueScansNGte)

        return request<Unit, PaginatedProductFullList>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation productsList
     *
     * @param brandsLike  (optional)
     * @param brandsTagsContains  (optional)
     * @param categoriesTagsContains  (optional)
     * @param code  (optional)
     * @param ecoscoreGrade  (optional)
     * @param labelsTagsContains  (optional)
     * @param novaGroup  (optional)
     * @param nutriscoreGrade  (optional)
     * @param orderBy Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param priceCount  (optional)
     * @param priceCountGte  (optional)
     * @param priceCountLte  (optional)
     * @param productNameLike  (optional)
     * @param size Number of results to return per page. (optional)
     * @param source * &#x60;off&#x60; - off * &#x60;obf&#x60; - obf * &#x60;opff&#x60; - opff * &#x60;opf&#x60; - opf * &#x60;off_pro&#x60; - off_pro (optional)
     * @param uniqueScansNGte  (optional)
     * @return RequestConfig
     */
    fun productsListRequestConfig(brandsLike: kotlin.String?, brandsTagsContains: kotlin.String?, categoriesTagsContains: kotlin.String?, code: kotlin.String?, ecoscoreGrade: kotlin.String?, labelsTagsContains: kotlin.String?, novaGroup: kotlin.Int?, nutriscoreGrade: kotlin.String?, orderBy: kotlin.String?, page: kotlin.Int?, priceCount: kotlin.Int?, priceCountGte: kotlin.Int?, priceCountLte: kotlin.Int?, productNameLike: kotlin.String?, size: kotlin.Int?, source: SourceProductsList?, uniqueScansNGte: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (brandsLike != null) {
                    put("brands__like", listOf(brandsLike.toString()))
                }
                if (brandsTagsContains != null) {
                    put("brands_tags__contains", listOf(brandsTagsContains.toString()))
                }
                if (categoriesTagsContains != null) {
                    put("categories_tags__contains", listOf(categoriesTagsContains.toString()))
                }
                if (code != null) {
                    put("code", listOf(code.toString()))
                }
                if (ecoscoreGrade != null) {
                    put("ecoscore_grade", listOf(ecoscoreGrade.toString()))
                }
                if (labelsTagsContains != null) {
                    put("labels_tags__contains", listOf(labelsTagsContains.toString()))
                }
                if (novaGroup != null) {
                    put("nova_group", listOf(novaGroup.toString()))
                }
                if (nutriscoreGrade != null) {
                    put("nutriscore_grade", listOf(nutriscoreGrade.toString()))
                }
                if (orderBy != null) {
                    put("order_by", listOf(orderBy.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (priceCount != null) {
                    put("price_count", listOf(priceCount.toString()))
                }
                if (priceCountGte != null) {
                    put("price_count__gte", listOf(priceCountGte.toString()))
                }
                if (priceCountLte != null) {
                    put("price_count__lte", listOf(priceCountLte.toString()))
                }
                if (productNameLike != null) {
                    put("product_name__like", listOf(productNameLike.toString()))
                }
                if (size != null) {
                    put("size", listOf(size.toString()))
                }
                if (source != null) {
                    put("source", listOf(source.value))
                }
                if (uniqueScansNGte != null) {
                    put("unique_scans_n__gte", listOf(uniqueScansNGte.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/products",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this Product.
     * @return ProductFull
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun productsRetrieve(id: kotlin.Int) : ProductFull {
        val localVarResponse = productsRetrieveWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ProductFull
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this Product.
     * @return ApiResponse<ProductFull?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun productsRetrieveWithHttpInfo(id: kotlin.Int) : ApiResponse<ProductFull?> {
        val localVariableConfig = productsRetrieveRequestConfig(id = id)

        return request<Unit, ProductFull>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation productsRetrieve
     *
     * @param id A unique integer value identifying this Product.
     * @return RequestConfig
     */
    fun productsRetrieveRequestConfig(id: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/products/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
